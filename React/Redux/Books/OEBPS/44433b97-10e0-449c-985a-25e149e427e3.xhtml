<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Using react-router-dom</h1>
                </header>
            
            <article>
                
<p>Adding <kbd>react-router-dom</kbd> is a piece of cake by now. Just take <kbd>yarn</kbd> or <kbd>npm</kbd> and add it to your project. Let's get started with our boilerplate code. Copy all of the starter files. We already added <kbd>react-router-dom</kbd> to our app in <a href="8a649b26-ca80-42de-b863-ba63d6a96915.xhtml" target="_blank">Chapter 3</a>, <em>Routing</em>, and <a href="1c7ddbcd-e0b6-421c-8e8a-b4da4b85cf64.xhtml" target="_blank">Chapter 4</a>, <em>The Concept of Immutability</em>. If your app does not have <kbd>react-router-dom</kbd>, you can add it as follows:</p>
<pre><strong>yarn add react-router-dom --exact</strong><br/>OR<br/><strong>npm install react-router-dom</strong></pre>
<p>In our health application, we will have the following pages:</p>
<table style="border-collapse: collapse;width: 100%" border="1">
<tbody>
<tr>
<td>
<p><strong>Page Description</strong></p>
</td>
<td>
<p><strong>Page Component</strong></p>
</td>
<td>
<p><strong>Page Routes</strong></p>
</td>
</tr>
<tr>
<td>
<p>Home page</p>
</td>
<td>
<p><kbd>HomePage</kbd></p>
</td>
<td>
<p><kbd>/</kbd></p>
</td>
</tr>
<tr>
<td>
<p>About page</p>
</td>
<td>
<p><kbd>AboutPage</kbd></p>
</td>
<td>
<p><kbd>/about</kbd></p>
</td>
</tr>
<tr>
<td>
<p>Contact page</p>
</td>
<td>
<p><kbd>ContactPage</kbd></p>
</td>
<td>
<p><kbd>/contact</kbd></p>
</td>
</tr>
<tr>
<td>
<p>Register page</p>
</td>
<td>
<p><kbd>RegisterPage</kbd></p>
</td>
<td>
<p><kbd>/register</kbd></p>
</td>
</tr>
<tr>
<td>
<p>Login page</p>
</td>
<td>
<p><kbd>LoginPage</kbd></p>
</td>
<td>
<p><kbd>/login</kbd></p>
</td>
</tr>
<tr>
<td>
<p>Forget password</p>
</td>
<td>
<p><kbd>ForgetPassword</kbd></p>
</td>
<td>
<p><kbd>/forget-password</kbd></p>
</td>
</tr>
<tr>
<td>
<p>Reset password</p>
</td>
<td>
<p><kbd>ResetPassword</kbd></p>
</td>
<td>
<p><kbd>/reset-password</kbd></p>
</td>
</tr>
<tr>
<td>
<p>Dashboard page</p>
</td>
<td>
<p><kbd>Dashboard</kbd></p>
</td>
<td>
<p><kbd>/admin/dashboard</kbd></p>
</td>
</tr>
<tr>
<td>
<p>List of users</p>
</td>
<td>
<p><kbd>UsersList</kbd></p>
</td>
<td>
<p><kbd>/admin/users</kbd></p>
</td>
</tr>
<tr>
<td>
<p>View single user</p>
</td>
<td>
<p><kbd>UserDetail</kbd></p>
</td>
<td>
<p><kbd>/admin/users/:userID</kbd></p>
</td>
</tr>
<tr>
<td>
<p>Edit single user</p>
</td>
<td>
<p><kbd>EditUser</kbd></p>
</td>
<td>
<p><kbd>/admin/users/:userID/edit</kbd></p>
</td>
</tr>
</tbody>
</table>
<div class="CDPAlignCenter CDPAlign packt_figref">Table 6.1:<em> </em>List of routes under consideration</div>
<p class="mce-root">The <kbd>react-router-dom</kbd> package includes a <kbd>&lt;BrowserRouter&gt;</kbd> component. The <kbd>&lt;BrowserRouter&gt;</kbd> component is an implementation of the router interface that makes use of HTML5's history API, in order to keep the UI in sync with the URL path. As mentioned on the documentation site, we can use <kbd>&lt;BrowserRouter&gt;</kbd> to implement simple routings, as follows:</p>
<pre>import { BrowserRouter } from 'react-router-dom';<br/><br/>ReactDOM.render(<br/>    &lt;BrowserRouter&gt;<br/>        &lt;App /&gt;<br/>    &lt;/BrowserRouter&gt;,<br/>    document.getElementById('root')<br/>);</pre>
<p>Inside of our <kbd>App</kbd> container, we can implement the logic for other routes. For example, to get to the about page and contact page, let's implement two routes, <kbd>/about</kbd> and <kbd>/contact</kbd>. Inside of <kbd>App/index.js</kbd>, include two routes, as follows:</p>
<pre>import React from "react";<br/>import { Switch, Route } from "react-router-dom";<br/><br/>import HomePage from "containers/HomePage/Loadable";<br/>import NotFoundPage from "containers/NotFoundPage/Loadable";<br/>import AboutPage from "containers/AboutPage/Loadable";<br/>import ContactPage from "containers/ContactPage/Loadable";<br/><br/>import GlobalStyle from "../../global-styles";<br/><br/>export default function App() {<br/>  return (<br/>    &lt;div&gt;<br/>      &lt;Switch&gt;<br/>        &lt;Route exact path="/" component={HomePage} /&gt;<br/>        &lt;Route exact path="/about" component={AboutPage} /&gt;<br/>        &lt;Route exact path="/contact" component={ContactPage} /&gt;<br/>        &lt;Route component={NotFoundPage} /&gt;<br/>      &lt;/Switch&gt;<br/>      &lt;GlobalStyle /&gt;<br/>    &lt;/div&gt;<br/>  );<br/>}</pre>
<p>That was not very difficult, was it? Now, we can update our logic to include all of the routes, as given in <em>Table 6.1</em>. Once we include all of the routes, as specified in the table, our route files should look like following:</p>
<pre> &lt;Switch&gt;<br/>        &lt;Route exact path="/" component={HomePage} /&gt;<br/>        &lt;Route exact path="/about" component={AboutPage} /&gt;<br/>        &lt;Route exact path="/contact" component={ContactPage} /&gt;<br/>        &lt;Route exact path="/login" component={Login} /&gt;<br/>        &lt;Route exact path="/forget-password" component={ForgetPassword} /&gt;<br/>        &lt;Route exact path="/reset-password" component={ResetPassword} /&gt;<br/>        &lt;Route exact path="/admin/dashboard" component={Dashboard} /&gt;<br/>        &lt;Route exact path="/admin/users" component={UsersList} /&gt;<br/><span>       &lt;Route exact path="/admin/users/:userID" component={UserDetail} /&gt;<br/></span>      &lt;Route exact path="/admin/users/:userID/edit" component={UserEdit}/&gt;<br/>        &lt;Route component={NotFoundPage} /&gt;<br/>      &lt;/Switch&gt;</pre>
<p>Now, it is just a matter of defining each individual component. We have created a simple React application with multiple pages. In <a href="6ece34d6-d944-4f1f-9f2f-59469c3aee4e.xhtml" target="_blank">Chapter 5</a>,<strong><em> </em></strong><em>React with Redux,</em> we will create a list of these views, and it can be connected easily.</p>
<p>As stated in the Redux documentation, Redux is the single source of truth of the data. In the same manner, the React router is the single source of truth for any application URLs. This works great in most cases, unless we require time traveling and rewinding actions that trigger a URL change. In such cases, we need a Redux binding for React Router. There are other, third-party libraries that can help us in this context. In our application, we are going to use <kbd>ConnectedReactRouter</kbd>, which provides the binding for Redux, synchronizing the state with Redux store maintaining unidirectional data flow.</p>


            </article>

            
        </section>
    </div>



  </body>
</html>