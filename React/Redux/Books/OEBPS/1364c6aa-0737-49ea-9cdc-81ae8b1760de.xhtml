<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Language middleware</h1>
                </header>
            
            <article>
                
<p>Language middleware allows us to create a multi-lingual React application. Explaining each step of how it works is beyond the scope of this book. However, we will try to give a brief walk-through of how it is configured. The working code for the language middleware is in the GitHub repository inside <kbd>CH06</kbd>:</p>
<ol>
<li>We used the <kbd>react-intl</kbd> (<a href="https://github.com/yahoo/react-intl" target="_blank">https://github.com/yahoo/react-intl</a>) library for internationalization. It can be added to the application in the same way as other—<kbd>yarn add react-intl</kbd>. </li>
<li class="mce-root"><span>The </span><kbd>CH06</kbd><span> repository is configured with two locales, Norwegian and English. If you check the </span><kbd>CH06/app/app.js</kbd> <span>file, you will see the</span> <kbd>LanguageProvider</kbd> <span>container. We are providing the container as the parent component of the Router so that we can change locale easily:</span></li>
</ol>
<pre style="color: black;padding-left: 60px">const render = messages =&gt; {<br/>  ReactDOM.render(<br/>    &lt;Provider store={store}&gt;<br/>     <strong> &lt;LanguageProvider messages={messages}&gt;</strong><br/>        &lt;ConnectedRouter history={history}&gt;<br/>          &lt;App /&gt;<br/>        &lt;/ConnectedRouter&gt;<br/>      <strong>&lt;/LanguageProvider&gt;</strong><br/>    &lt;/Provider&gt;,<br/>    MOUNT_NODE,<br/>  );<br/>};</pre>
<ol start="3">
<li>There are also browsers without international support. To support those browsers, we need to polyfill (learn more about polyfills at <a href="https://javascript.info/polyfills" target="_blank">https://javascript.info/polyfills</a>):</li>
</ol>
<pre style="color: black;padding-left: 60px">// Chunked polyfill for browsers without Intl support<br/>if (!window.Intl) {<br/>  new Promise(resolve =&gt; {<br/>    resolve(import('intl'));<br/>  })<br/>    .then(() =&gt;<br/>      Promise.all([<br/>        import('intl/locale-data/jsonp/en.js'),<br/>        import('intl/locale-data/jsonp/nb-NO.js'),<br/>      ]),<br/>    ) // eslint-disable-line prettier/prettier<br/>    .then(() =&gt; render(translationMessages))<br/>    .catch(err =&gt; {<br/>      throw err;<br/>    });<br/>} else {<br/>  render(translationMessages);<br/>}</pre>
<ol start="4">
<li>To inject two types of locale, we have created the <kbd>i18n.js</kbd> file, in which we provide a path to JSON files containing translations. Check the <kbd>CH06/app/i18n.js</kbd> file.</li>
<li>The next step is to make every string translatable. To do so, <kbd>react-intl</kbd> provides two handy functions—<kbd>IntlProvider</kbd> and <kbd>FormattedMessage</kbd>. To understand the concept, here is a code snippet that is easy to understand:</li>
</ol>
<pre style="padding-left: 60px" class="mce-root"><span class="pl-k">import</span><span> </span><span class="pl-smi">React</span><span>, {</span><span class="pl-smi">Component</span><span>} </span><span class="pl-k">from</span><span> </span><span class="pl-s"><span class="pl-pds">'</span>react<span class="pl-pds">'</span></span><span>;
import ReactDOM from 'react-dom';
import {IntlProvider, FormattedMessage} from 'react-intl';

class App extends Component {
    constructor(props) {
        super(props);
        this.state = {
            name       : 'Yoshmi',
            unreadCount: 9000,
        };
    }

    render() {
        const {name, unreadCount} = this.state;

        return (
            &lt;p&gt;
                &lt;FormattedMessage
                    id="welcome"
                    defaultMessage={`Hello {name}, you have {unreadCount, number} {unreadCount, plural,
                      one {message}
                      other {messages}
                    }`}
                    values={{name: &lt;b&gt;{name}&lt;/b&gt;, unreadCount}}
                /&gt;
            &lt;/p&gt;
        );
    }
}

ReactDOM.render(
    &lt;IntlProvider locale="en"&gt;
        &lt;App /&gt;
    &lt;/IntlProvider&gt;,
    document.getElementById('container')
);</span></pre>
<ol start="6">
<li>We have used similar methods to translate each of the string and provided a locale toggle component in the footer.</li>
</ol>
<p>As the part of the assignment, please have a look at how we have separated the translatable string into separate files in each of the containers. The <kbd>&lt;Login /&gt;</kbd>, <kbd>&lt;NotFoundPage /&gt;</kbd>, <kbd>&lt;Register /&gt;</kbd>, and <kbd>&lt;User /&gt;</kbd> <span>containers </span>contain the <kbd>intl</kbd> file, <kbd>messages.js</kbd>. These files are included inside the component and use <span><kbd>FormattedMessage</kbd> from <kbd>react-intl</kbd> to make a string translatable. Have a play around to get a better understanding of how it works. </span></p>


            </article>

            
        </section>
    </div>



  </body>
</html>