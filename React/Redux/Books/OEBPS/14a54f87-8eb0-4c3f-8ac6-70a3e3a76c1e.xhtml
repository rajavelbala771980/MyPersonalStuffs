<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Seeding users</h1>
                </header>
            
            <article>
                
<p>We are going to use the <kbd>faker</kbd> library (<a href="https://github.com/marak/Faker.js/" target="_blank">https://github.com/marak/Faker.js/</a>) to create a list of users that we will be using in our REST API. Create a <kbd>seed.js</kbd> file inside <kbd>server/helpers/seed.js</kbd>, as follows:</p>
<pre>if (<br/>  process.argv.length &lt;= 2 ||<br/>  !['Admin', 'User', 'Doctor'].includes(process.argv[2])<br/>) {<br/>  console.log(`The script need a params: ${__filename}`);<br/>  console.log('Params valid: Doctor');<br/>  process.exit(-1);<br/>}<br/><br/><strong>const faker = require('faker');</strong><br/>require('../helpers/prototype');<br/>const Model = require('../models');<br/><br/>const run = param =&gt; {<br/>  console.log(`Script runing: ${param}`);<br/><br/>  switch (param) {<br/>    case 'Doctor':<br/>      return Promise.all(<br/>        [...new Array(100).keys()].map(() =&gt;<br/>          Model.users.createData(<br/>            {<br/>              <strong>password: '123123',</strong><br/><strong>              confirmPassword: '123123',</strong><br/><strong>              email: faker.internet.email(),</strong><br/><strong>              photo: faker.image.imageUrl(),</strong><br/><strong>              name: faker.name.findName(),</strong><br/>            },<br/>            { role: 'practitioner' },<br/>          ),<br/>        ),<br/>      );<br/>    case 'Admin':<br/>      return Model.users.createData(<br/>        {<br/>          <strong>password: '123123',</strong><br/><strong>          confirmPassword: '123123',</strong><br/><strong>          email: 'admin@rasklege.com',</strong><br/><strong>          photo: faker.image.imageUrl(),</strong><br/><strong>          name: faker.name.findName(),</strong><br/>        },<br/>        { role: 'admin' },<br/>      );<br/>    default:<br/>      return Promise.all(<br/>        [...new Array(100).keys()].map(() =&gt;<br/>          Model.users.createData({<br/>            <strong>password: '123123',</strong><br/><strong>            confirmPassword: '123123',</strong><br/><strong>            email: faker.internet.email(),</strong><br/><strong>            photo: faker.image.imageUrl(),</strong><br/><strong>            name: faker.name.findName(),</strong><br/>          }),<br/>        ),<br/>      );<br/>  }<br/>};<br/><br/>run(process.argv[2])<br/>  .then((...others) =&gt; {<br/>    console.log('Finished:', others);<br/>  })<br/>  .catch(error =&gt; {<br/>    console.log('Error:', error);<br/>    process.exit(-1);<br/>  });</pre>
<p class="mce-root">Now we can use the <kbd>seeder</kbd> class to <kbd>seed</kbd> different types of users (<kbd>Doctor</kbd>, <kbd>User</kbd>, and <kbd>Admin</kbd>). We already did these steps in <a href="15bbf065-c5aa-499f-8176-a1d7650345b4.xhtml" target="_blank">Chapter 6</a>, <em>Extending Redux by Middleware</em>. Run the <kbd>seeder</kbd> commands to generate different types of users:</p>
<pre><strong>node server/helpers/seed.js User </strong><br/><strong>node server/helpers/seed.js Doctor </strong><br/><strong>node server/helpers/seed.js Admin</strong> </pre>


            </article>

            
        </section>
    </div>



  </body>
</html>