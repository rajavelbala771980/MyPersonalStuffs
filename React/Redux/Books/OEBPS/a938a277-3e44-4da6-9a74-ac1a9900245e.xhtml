<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Authentication</h1>
                </header>
            
            <article>
                
<p>To authenticate a user, we need to implement an endpoint. Follow these steps to implement the authentication process:</p>
<ol>
<li>Define <kbd>router</kbd> inside <kbd>server/api/index.js</kbd>:</li>
</ol>
<pre style="padding-left: 60px">router.post('/users/signin', User.signin);</pre>
<ol start="2">
<li>Define the <kbd>signin</kbd> method inside the <kbd>user</kbd> controller inside <kbd>server/api/user.js</kbd>:</li>
</ol>
<pre style="padding-left: 60px"><strong>signin</strong>: (req, res) =&gt; {<br/>    Model.users<br/>      .authenticate(req.body.user)<br/>      .then(user =&gt; handleSuccess(res, { user }))<br/>      .catch(errors =&gt;<br/>        handleFailure(res, { errors, message: errors.message, status: 401 }),<br/>      );<br/>  },</pre>
<ol start="3">
<li>Define the <kbd>authenticate</kbd> method inside the <kbd>users</kbd> model (<kbd>server/models/users.js</kbd>):</li>
</ol>
<pre style="padding-left: 60px">Schema.statics.authenticate = function(params = {}) {<br/>    return new Promise((resolve, reject) =&gt; {<br/>      try {<br/>        const emptries = ['email', 'password'].filter(key =&gt;<br/>          [undefined].includes(params[key]),<br/>        );<br/><br/>        if (emptries.length) {<br/>          throw emptries.reduce(<br/>            (obj, key) =&gt; ({<br/>              ...obj,<br/>              [key]: `${key.humanize()} can't be blank`,<br/>            }),<br/>            {},<br/>          );<br/>        }<br/><br/>        this.findOne({ email: params.email, deleted: [false, null] }).then(<br/>          user =&gt; {<br/>            if (!user || !bcrypt.compareSync(params.password, user.password)) {<br/>              reject(<br/>                new Error('Authentication failed. Invalid user or password.'),<br/>              );<br/>            } else {<br/>              resolve(<br/>                user.toJson({<br/>                  token: generateToken({ loginKey: user.loginKey }),<br/>                }),<br/>              );<br/>            }<br/>          },<br/>        );<br/>      } catch (e) {<br/>        reject(e);<br/>      }<br/>    });<br/>  };</pre>
<p style="padding-left: 60px">The <kbd>authenticate</kbd> method takes <kbd>email</kbd> and <kbd>password</kbd> as arguments and checks with the database. If the user is valid, a token is generated token: <kbd>generateToken({ loginKey: user.loginKey })</kbd> and returned as the response. </p>
<ol start="4">
<li>We need to define the <kbd>generateToken</kbd> function. Create a <kbd>jwt.js</kbd> file inside <kbd>server/helpers/jwt.js</kbd>. Define two functions: <kbd>generateToken</kbd>, to generate a new token, and <kbd>verifyToken</kbd>, to verify whether an existing <kbd>token</kbd> is valid:</li>
</ol>
<pre style="padding-left: 60px">const jwt = require('jsonwebtoken');<br/><br/>const JWT_SECRET = process.env.SECRET || 'somethingkey';<br/><br/>const generateToken = data =&gt;<br/>  jwt.sign(data, JWT_SECRET, { expiresIn: process.env.EXPIRED_LOGIN || '1d' });<br/><br/>const verifyToken = token =&gt;<br/>  new Promise((resolve, reject) =&gt; {<br/>    if (!token) {<br/>      return reject(new Error('Token is null or expired'));<br/>    }<br/><br/>    return jwt.verify(<br/>      token,<br/>      JWT_SECRET,<br/>      (err, decoded) =&gt; (err || !decoded ? reject(err) : resolve(decoded)),<br/>    );<br/>  });<br/><br/>module.exports = { generateToken, verifyToken };</pre>
<ol start="5">
<li>Use Rested to test the authentication endpoint. If you check out the following screenshot, valid credentials generate token:</li>
</ol>
<p class="CDPAlignCenter CDPAlign"><img src="Images/a1788a91-eb0d-4686-898c-3fff79d54616.png" width="1950" height="1163"/></p>
<div class="CDPAlignCenter CDPAlign packt_figref">Figure 8.3: Request/Response using the HTTP client for the /api/users/signin endpoint</div>


            </article>

            
        </section>
    </div>



  </body>
</html>