<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Redux form</h1>
                </header>
            
            <article>
                
<p>In this project, we're going to use <kbd>redux-form</kbd> (<a href="https://redux-form.com/" target="_blank">https://redux-form.com/</a>) to build the forms. Redux form is a popular way to manage form state in Redux. It is easy to use, provides immutable JS support, and optimizes and solves most of the use cases ranging from simple, multi-step forms, to more complex. Some of the nifty examples of how we can integrate Redux form can be found here: <a href="https://redux-form.com/8.1.0/examples/">https://redux-form.com/8.1.0/examples/</a>.</p>
<p>There are five steps involved in using <kbd>redux-form</kbd> in our application, which are as follows:</p>
<ol>
<li>Install the package, as follows:</li>
</ol>
<pre style="padding-left: 60px"><strong><span>yarn add redux-form --exac</span></strong></pre>
<ol start="2">
<li>Initiate the form reducer in the root reducer. So, in <kbd>app/reducers.js</kbd><span>, we add form reducer, as follows:</span></li>
</ol>
<pre style="padding-left: 60px">import { reducer as formReducer } from 'redux-form/immutable'; <br/>export default function createReducer(injectedReducers = {}) {<br/> const rootReducer = combineReducers({<br/>   form: formReducer,<br/>   ...injectedReducers,<br/> });<br/><br/> const mergeWithRouterState = connectRouter(history);<br/> return mergeWithRouterState(rootReducer);<br/>}</pre>
<ol start="3">
<li>Make the <kbd>Form</kbd> component, as follows:</li>
</ol>
<pre style="padding-left: 60px"><span>import React from 'react'</span><br/><span>import { Field, reduxForm } from 'redux-form'</span><br/><br/><span>let LoginForm = props =&gt; {</span><br/><span> const { handleSubmit } = props</span><br/><span> return &lt;form onSubmit={handleSubmit}&gt;{/* form body*/}&lt;/form&gt;</span><br/><span>}</span><br/><br/><span>LoginForm = reduxForm({</span><br/><span> // a uniq</span><span>ue name for the form</span><br/><span> form: 'login'</span><br/><span>})(LoginForm)</span><br/><br/><span>export default LoginForm;</span></pre>
<ol start="4">
<li>Create form contents using the <kbd>&lt;Field/&gt;</kbd> component. The <kbd>&lt;Field/&gt;</kbd><span> component from</span> <kbd>redux-form</kbd> <span>helps to connect each input to the Redux store, as follows:</span></li>
</ol>
<pre style="padding-left: 60px">&lt;Field<br/>   name="email"<br/>   hasFeedback<br/>   component={renderInput}<br/>   disabled={submitting}<br/>   label=”Email”<br/> /&gt;</pre>
<p style="padding-left: 60px"><kbd>&lt;Field&gt;</kbd> is a very powerful component, which can take a class or a stateless component. You can read about its two types of usage at <a href="https://redux-form.com/8.1.0/docs/api/field.md/#usage">https://redux-form.com/8.1.0/docs/api/field.md/#usage</a>. We're going to use the stateless component as it provides better ways to validate, and gives more control over how input can be rendered. We can create a stateless <kbd>renderInput</kbd> component, similar to the one given as follows:</p>
<pre style="padding-left: 60px"><span>import React from 'react';</span><br/><span>import PropTypes from 'prop-types';</span><br/><span>import { Form, Input } from 'antd';</span><br/><br/><span>const renderInput = props =&gt; {</span><br/><span> const { input, meta, hasFeedback, label, ...rest } = props;</span><br/><span> const hasError = meta.touched &amp;&amp; meta.invalid;</span><br/><br/><span> return (</span><br/><span>   &lt;Form.Item</span><br/><span>     label={label}</span><br/><span>     help={hasError &amp;&amp; meta.error}</span><br/><span>     hasFeedback={hasFeedback &amp;&amp; hasError}</span><br/><span>     validateStatus={hasError ? 'error' : 'success'}</span><br/><span>   &gt;</span><br/><span>     &lt;Input {...input} {...rest} /&gt;</span><br/><span>   &lt;/Form.Item&gt;</span><br/><span> );</span><br/><span>};</span><br/><br/><span>renderInput.propTypes = {</span><br/><span> input: PropTypes.shape({</span><br/><span>   name: PropTypes.string.isRequired,</span><br/><span> }).isRequired,</span><br/><span> meta: PropTypes.shape({</span><br/><span>   asyncValidating: PropTypes.bool,</span><br/><span>   error: PropTypes.string,</span><br/><span>   touched: PropTypes.bool,</span><br/><span> }).isRequired,</span><br/><span> label: PropTypes.node,</span><br/><span> type: PropTypes.string,</span><br/><span> hasFeedback: PropTypes.bool,</span><br/><span>};</span><br/><br/><span>export default renderInput;</span></pre>
<p style="padding-left: 60px">If you take a closer look at the code, we've combined the <kbd>Input</kbd> and <kbd>Form</kbd> component from <kbd>antd</kbd> to provide error feedback to the user. If you check the usage on the documentation site <a href="https://ant.design/components/form/">https://ant.design/components/form/</a>, you can see <kbd>Form</kbd>. An item component has props, such as <kbd>hasFeedback</kbd>, and <kbd>validateStatus</kbd>, which can be used to provide feedback to the user.</p>
<ol start="5">
<li>Handling form submission</li>
</ol>
<p style="padding-left: 60px">An <kbd>onSubmit</kbd> function should be passed to the component and provided to the form component that passes the form data in the form of JSON. The following code shows the container component for the <kbd>Login</kbd> component:</p>
<pre style="padding-left: 60px">import<span> </span>LoginForm<span> </span>from ‘./LoginForm’;<br/><br/>class<span> </span>LoginPage<span> </span>extends Component {<br/> submit = values =&gt; {<br/>      console.log(values)<br/> }<br/> render() {<br/>   return (<br/>     &lt;div className="login-containers"&gt;<br/>          &lt;LoginForm onSubmit={this.onSubmit} /&gt;<br/>     &lt;/div&gt;<br/>   );<br/> }<br/>}</pre>
<p style="padding-left: 60px">If you are new to Redux and React, you can go ahead and skip <kbd>redux-form</kbd> and build your own components. This will help you build confidence in the subject. Go ahead and run the code, submit the form, and check out the values in the console.</p>


            </article>

            
        </section>
    </div>



  </body>
</html>