<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Connecting the home page with the API</h1>
                </header>
            
            <article>
                
<p>Whenever any user opens our application, the initial request is to see if the user is authenticated or not. This can be done by storing logged-in users in cookies or local storage for a certain amount of time and then checking if the token is valid. Well, developers might ask "Why cookies and not local storage?" While we agree that local storage is better and is used more often, we wanted to keep the hands-on as simple as possible. Our goal is to show the logged in user in the header bar and show the list of users, as shown in the screenshot:</p>
<p class="CDPAlignCenter CDPAlign"><img src="Images/57bfef2f-03df-4274-9bd3-1ba71193039a.png" style="width:30.08em;height:40.17em;" width="799" height="1065"/></p>
<div class="CDPAlignCenter CDPAlign packt_figref">Figure 6.4: Dashboard page for logged in user</div>
<p>To achieve this, follow these steps:</p>
<ol>
<li class="mce-root"><span>We dispatch the </span><kbd>onApplicationLoad</kbd> <span>function every time a user loads the application to see whether the user is authenticated or not:</span></li>
</ol>
<pre style="color: black;padding-left: 60px">const mapDispatchToProps = dispatch =&gt; ({<br/>  onApplicationLoad: () =&gt; dispatch(onApplicationLoad()),<br/>});</pre>
<p style="padding-left: 60px" class="mce-root"><span>In addition to this, we will call this method in the constructor so that it is invoked as soon as possible:</span></p>
<pre style="color: black;padding-left: 30px">  constructor(props) {<br/>    super(props);<br/>    props.onApplicationLoad();<br/>  }</pre>
<ol start="2">
<li class="mce-root"><span>Create a Saga to listen to the</span> <kbd>IS_USER_AUTHENTICATED</kbd> <span>action </span><span>and validate with our database to see whether the user is valid:</span></li>
</ol>
<pre style="color: black;padding-left: 60px">import request from 'utils/request';<br/>import { call, put, takeLatest } from 'redux-saga/effects';<br/>import { onLoginSuccess, onLoginFailure } from 'containers/Login/actions';<br/>import { IS_USER_AUTHENTICATED } from './constants';<br/><br/>export function* onLoginRequest() {<br/>  try {<br/>    const { success, user, message } = yield call(request, '/api/users/auth', {<br/>      headers: {<br/>        'Content-Type': 'application/json',<br/>      },<br/>    });<br/><br/>    if (!success) {<br/>      throw message;<br/>    }<br/><br/>    yield put(onLoginSuccess(user));<br/>  } catch (err) {<br/>    yield put(onLoginFailure(err.toString()));<br/>  }<br/>}<br/><br/>export default function* data() {<br/>  yield takeLatest(IS_USER_AUTHENTICATED, onLoginRequest);<br/>}</pre>
<ol start="3">
<li class="mce-root">We have already defined selectors and reducers to get the current user and other required props. We have already seen how to inject Saga and reducers from the earlier section.</li>
<li class="mce-root"><span>The next step is to inject reducers, selectors, and Saga to <kbd>App</kbd> component. So, in the end, your</span> <kbd>app/containers/App/index.js</kbd> <span>should look like this:</span></li>
</ol>
<pre style="color: black;padding-left: 60px">import React, { Component } from 'react';<br/>import PropTypes from 'prop-types';<br/>import { Helmet } from 'react-helmet';<br/>import styled from 'styled-components';<br/>import { Switch, Route, withRouter } from 'react-router-dom';<br/>import { compose } from 'redux';<br/>import { connect } from 'react-redux';<br/>import LoginPage from 'containers/Login/Loadable';<br/>import RegisterPage from 'containers/Register/Loadable';<br/>import HomePage from 'containers/Home/Loadable';<br/>import NotFoundPage from 'containers/NotFoundPage/Loadable';<br/>import Header from 'components/Header';<br/>import Footer from 'components/Footer';<br/>import { createStructuredSelector } from 'reselect';<br/>import { makeSelectLoading } from 'containers/App/selectors';<br/>import injectSaga from 'utils/injectSaga';<br/>import { onApplicationLoad } from './actions';<br/>import GlobalStyle from '../../global-styles';<br/>import saga from './saga';<br/>import './style.css';<br/><br/>const AppWrapper = styled.div`<br/>  max-width: calc(768px + 16px * 2);<br/>  margin: 0 auto;<br/>  display: flex;<br/>  min-height: 100%;<br/>  padding: 0 16px;<br/>  flex-direction: column;<br/><br/>  .btn {<br/>    line-height: 0;<br/>  }<br/>`;<br/><br/>class App extends Component {<br/>  <strong>constructor(props) {</strong><br/><strong>    super(props);</strong><br/><strong>    props.onApplicationLoad();</strong><br/><strong>  }</strong><br/><br/>  render() {<br/>    return (<br/>      &lt;AppWrapper&gt;<br/>        &lt;Helmet titleTemplate="%s - Rask Lege HVL" defaultTitle="Rask Lege HVL"&gt;<br/>          &lt;meta name="description" content="A Rask Lege HVL application" /&gt;<br/>        &lt;/Helmet&gt;<br/>        &lt;Header /&gt;<br/>        &lt;Switch&gt;<br/>          &lt;Route path="/login" component={LoginPage} /&gt;<br/>          &lt;Route path="/register" component={RegisterPage} /&gt;<br/>          <strong>{this.props.isLoaded &amp;&amp; &lt;Route path="/" component={HomePage} /&gt;}</strong><br/>          &lt;Route path="" component={NotFoundPage} /&gt;<br/>        &lt;/Switch&gt;<br/>        &lt;Footer /&gt;<br/>        &lt;GlobalStyle /&gt;<br/>      &lt;/AppWrapper&gt;<br/>    );<br/>  }<br/>}<br/><br/>App.propTypes = {<br/>  onApplicationLoad: PropTypes.func,<br/>  isLoaded: PropTypes.bool,<br/>};<br/><br/><strong>const mapStateToProps = createStructuredSelector({</strong><br/><strong>  isLoaded: makeSelectLoading(),</strong><br/><strong>});</strong><br/><br/><strong>const mapDispatchToProps = dispatch =&gt; ({</strong><br/><strong>  onApplicationLoad: () =&gt; dispatch(onApplicationLoad()),</strong><br/><strong>});</strong><br/><br/><strong>const withConnect = connect(</strong><br/><strong>  mapStateToProps,</strong><br/><strong>  mapDispatchToProps,</strong><br/><strong>);</strong><br/><br/><strong>const withSaga = injectSaga({ key: 'login', saga });</strong><br/><br/>export default withRouter(<br/>  <strong>compose(</strong><br/><strong>    withSaga,</strong><br/><strong>    withConnect,</strong><br/><strong>  )</strong>(App),<br/>);</pre>
<ol start="5">
<li class="mce-root">We have highlighted the code that we added in order to help you understand the changes. Other terms and functions should be familiar by now. You should be able to download the entire runnable code from GitHub and run it. To run the application, simply install the <kbd>yarn</kbd> <span>dependencies </span>and run it with <kbd>yarn start</kbd>.</li>
<li class="mce-root"><span>In the preceding snippet, if the application is loaded, we redirect them to the home page. Now, on the home page, we check whether the user is logged in or not. If the user is not logged in, we redirect to the login page. So, let's change the</span> <kbd>app/containers/Home/index.js</kbd> <span>file. Note, the Home container is wrapped by the <kbd>isRequired</kbd> higher-order function. We could connect the component inside the same container, but we just wanted to show you some alternative ways to connect React components with Redux. The following snippet checks</span> <kbd>currentUser</kbd>, <span>and if <kbd>currentUser</kbd> is an admin, we will show</span> the <kbd>SearchUser</kbd> <span>view. Otherwise, we show</span> the <kbd>SearchDoctor</kbd> <span>view with the available props. We will need to create a Doctor container:</span></li>
</ol>
<pre style="color: black;padding-left: 60px">import React, { Component } from 'react';<br/>import PropTypes from 'prop-types';<br/>import SearchUser from 'containers/User/Loadable';<br/>import SearchDoctor from 'containers/Doctor/Loadable';<br/><br/>import { isRequired } from './isAuth';<br/><br/>class Home extends Component {<br/>  get renderContent() {<br/>    const { currentUser } = this.props;<br/><br/>    if (currentUser.role === 'admin') {<br/>      return &lt;SearchUser {...this.props} /&gt;;<br/>    }<br/><br/>    return &lt;SearchDoctor {...this.props} /&gt;;<br/>  }<br/><br/>  render() {<br/>    return &lt;div className="home-containers"&gt;{this.renderContent}&lt;/div&gt;;<br/>  }<br/>}<br/><br/>Home.propTypes = {<br/>  currentUser: PropTypes.object,<br/>};<br/><br/>export default isRequired(Home);<br/>   </pre>
<ol start="7">
<li class="mce-root"><span>Inside</span> <kbd>app/containers/Home/isAuth.js</kbd><span>, we will connect the component with Redux. Moreover, the</span> <kbd>isRequired</kbd> <span>higher-order function provides other functionalities, such as </span><span>if the user is not authenticated, it will redirect to login page. Check the</span> <kbd>onChecking</kbd> <span>method as follows: </span></li>
</ol>
<pre style="color: black;padding-left: 60px">import React, { Component } from 'react';<br/>import PropTypes from 'prop-types';<br/>import { connect } from 'react-redux';<br/>import { withRouter } from 'react-router-dom';<br/>import { createStructuredSelector } from 'reselect';<br/>import {<br/>  makeSelectCurrentUser,<br/>  makeSelectLoading,<br/>} from 'containers/App/selectors';<br/><br/>export const isRequired = OldComponent =&gt; {<br/>  class newComponent extends Component {<br/>    componentWillMount() {<br/>      this.onChecking(this.props);<br/>    }<br/><br/>    componentWillReceiveProps(nextProps) {<br/>      this.onChecking(nextProps);<br/>    }<br/><br/>    <strong>onChecking(props) {</strong><br/><strong>      const { currentUser = {}, history, isLoaded } = props;</strong><br/><strong>      if (isLoaded &amp;&amp; !currentUser.id) {</strong><br/><strong>        history.replace('/login');</strong><br/><strong>      }</strong><br/><strong>    }</strong><br/><br/>    render() {<br/>      return &lt;OldComponent {...this.props} /&gt;;<br/>    }<br/>  }<br/><br/>  const mapStateToProps = createStructuredSelector({<br/>    isLoaded: makeSelectLoading(),<br/>    currentUser: makeSelectCurrentUser(),<br/>  });<br/><br/>  newComponent.propTypes = {<br/>    history: PropTypes.object,<br/>    isLoaded: PropTypes.bool,<br/>    currentUser: PropTypes.object,<br/>  };<br/><br/>  return connect(mapStateToProps)(withRouter(newComponent));<br/>};</pre>
<ol start="8">
<li class="mce-root">If the <kbd>currentUser</kbd> is an admin, we are redirected to the <kbd>SearchUser</kbd> page. We already have a User container and inside <kbd>index.js</kbd>, we have three cases:
<ul>
<li>We list all the users. <kbd>&lt;All /&gt;</kbd> container</li>
<li>We add a new user. <kbd>&lt;AddUser /&gt;</kbd> container.</li>
<li>We can edit an existing user. <kbd>&lt;EditUser /&gt;</kbd> container.</li>
</ul>
</li>
</ol>


            </article>

            
        </section>
    </div>



  </body>
</html>