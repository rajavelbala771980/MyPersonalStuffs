<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Understanding Redux methods</h1>
                </header>
            
            <article>
                
<p>Let's implement a simple example to turn on and turn off the light. We can build a simple robot that just listens to commands and, based on the commands, performs some actions. For simplicity, suppose that our robot can only understand two commands, as follows:</p>
<ol>
<li style="font-weight: 400"><kbd>TURN_ON</kbd></li>
<li style="font-weight: 400"><kbd>TURN_OFF</kbd></li>
</ol>
<p>Now, let's build our robotic function:</p>
<pre>const tubeLight = (state = "OFF", action) =&gt; {<br/> switch (action.type) {<br/>   case "TURN_ON":<br/>     return "ON";<br/>   case "TURN_OFF":<br/>     return "OFF";<br/>   default:<br/>     return state;<br/> }<br/>};</pre>
<p>This is a simple JavaScript function that takes the initial state and action as parameters and returns a state. That sounds like something familiar, doesn’t it? Yup; you are right. This is a simple reducer function.</p>
<p>In the first section, you learned Redux's first principle: a single source of truth. Redux provides a function called <kbd>createStore</kbd> that takes the main reducer file and creates the store. Let's create a store, as follows:</p>
<pre>import { createStore } from "redux";<br/>const store = createStore(tubeLight);</pre>
<p>So far, so good. So, what did we do here? We imported the <kbd>createStore</kbd> function from the Redux library that is given <kbd>tubeLight</kbd>, which is a reducer, as an argument and is saved into a variable called a store. Here, you can recall a functional programming concept. A function can consume another function. Now, as you have already seen, the store has three methods: <kbd>getState</kbd>, <kbd>dispatch</kbd>, and <kbd>subscribe</kbd>. Let's use them.</p>
<p><kbd>log</kbd> the initial state, as follows:</p>
<pre class="mce-root"><span>console.log("Initially tubelight is: ", store.getState());</span></pre>
<p>Try to build it, and run it again (<kbd>yarn build &amp;&amp; yarn start</kbd>). Check the console:</p>
<pre class="mce-root"><span>Initially tubelight is:  OFF</span></pre>
<p>Nothing complex, right? We provided the initial state to <kbd>OFF</kbd>, and it logged the initial state as <kbd>OFF</kbd>. That looks good. Now, let's try to modify the store. In other words, we should instruct the robot to turn on the <kbd>tubelight</kbd>. Remember, we can only modify the store by using a <kbd>dispatch</kbd> function. Now, we can use that function and log the state, in order to see the state change:</p>
<pre>store.dispatch({ type: "TURN_ON" });<br/>console.log("Now tubelight is: ", store.getState());</pre>
<p>The output that you get on the console should be as follows:</p>
<pre><span>Now tubelight is:  ON</span></pre>
<p>Now, it makes sense, right? Let's go further and display the state on the browser, rather than on the console. To do that, let's create a button. When we press the button, it should toggle the <kbd>tubelight</kbd> state. That is to say, if the <kbd>tubelight</kbd> is <kbd>ON</kbd>, we turn it off, and vice versa. To make it simple, let's forget about React and use native JavaScript:</p>
<pre>const button = document.createElement("button");<br/>button.setAttribute("id", "lightButton");<br/>var text = document.createTextNode("Toggle Light");<br/>button.appendChild(text);<br/>document.body.appendChild(button);</pre>
<p>The preceding snippet will create a simple button on the browser, with the text <kbd>Toggle Light</kbd> and the ID <kbd>lightButton</kbd>.</p>
<p>Now, we need to add an event listener. That is to say, if the tubelight is on, we turn it off by clicking on the button. We can do that as follows:</p>
<pre>document.getElementById("lightButton").addEventListener("click", () =&gt; {<br/> if (store.getState() === "ON") {<br/>   store.dispatch({ type: "TURN_OFF" });<br/> } else {<br/>   store.dispatch({ type: "TURN_ON" });<br/> }<br/>});</pre>
<p>Now, let's render that in the browser, inside of the <kbd>body</kbd> tag:</p>
<pre>const render = () =&gt; {<br/> document.body.innerText = store.getState();<br/> document.body.appendChild(button);<br/>};</pre>
<p>This will render the initial state of the store. But we need to display when the state changes. To do that, our third method of the store comes into play (<kbd>subscribe()</kbd>):</p>
<pre>store.subscribe(render);<br/>render();</pre>
<p>Now, try to build the app and run it (<kbd>yarn build &amp;&amp; yarn start</kbd>). Try to click on the button to change the state, and see whether the state is reflected on the browser. Pretty sweet, right? You can find the working example of this code in the GitHub repository, inside <kbd>CH01/getting-started</kbd>.</p>
<p>Manually updating the DOM does not scale in a real application. To do so, we use the help of other libraries, such as React. We will configure React with Redux and use it to understand other complex scenarios in Redux.</p>


            </article>

            
        </section>
    </div>



  </body>
</html>