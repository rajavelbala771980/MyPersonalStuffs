<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Reducers</h1>
                </header>
            
            <article>
                
<p>JavaScript functions that take actions and states as input and return the new states are <strong>reducers</strong>. Well, if this is confusing, try to keep in mind that the action only describes what happened, not how the application state transforms.</p>
<p>It is very important to understand the reducer function. Let's consider our hospital management system. Our application's state can look like the following:</p>
<pre class="mce-root"><span>{</span><br/><span> doctors: [</span><br/><span>   {</span><br/><span>     name: "John Doe",</span><br/><span>     department: "Radiology",</span><br/><span>     address: "Kathmandu, 4017, Nepal",</span><br/><span>     telecom: "999-999-999"</span><br/><span>   },</span><br/><span>   {</span><br/><span>     name: "Ola Nordmann",</span><br/><span>     department: "General Physician",</span><br/><span>     address: "Kong Oscarsgate 29, 5017, Bergen, Norway",</span><br/><span>     telecom: "111-111-1111"</span><br/><span>   }</span><br/><span> ];</span><br/><span>}</span></pre>
<p>When creating a reducer function, it is important that we remember the reducer principle: it must be a pure function. It should just take the action and return a new state, with no side effects, no mutations, and no API calls.</p>
<p>Let's consider another example of a content management system. In a normal CMS, we have posts and categories. So, our state at an instance could look like the following:</p>
<pre>{<br/> posts: [<br/>   { user: 'John Doe', category: 'Practitioner', text: 'This is the first post about Practitioner.' },<br/>   { user: 'Ola Nordmann', category: 'Patients', text: 'This is the first post about Patients.' }<br/> ],<br/> filter: ‘Patients’<br/>}</pre>
<p>There's nothing complicated here, right? Now, let's start to write our reducer function for both use cases: our CMS use case and our hospital management system use case.</p>
<p>We will start by defining an initial state. Let's initiate our initial state by creating an empty object with an array of empty doctors:</p>
<pre class="mce-root"><span>const initialState = {</span><br/><span> doctors: []</span><br/><span>};</span></pre>
<p>In any database, there is a need for creating, updating, reading, and deleting resources. Similarly, in the hospital management system, we need to read a doctor's record, create a new record, update it, or delete it. Hence, we are likely to have multiple action objects defined, as we mentioned in the preceding section.</p>
<p>This introduces a requirement to handle reducer functions for each of the actions. We can create a single reducer function to handle a similar scenario, and make use of the <kbd>switch</kbd> case to handle multiple action types:</p>
<pre>import {<br/> ADD_NEW_DOCTOR_REQUEST,<br/>} from './actions'<br/><br/>function addDoctor(state = initialState, action) {<br/> switch (action.type) {<br/>   case ADD_NEW_DOCTOR_REQUEST:<br/>     return Object.assign({}, state, {<br/>       doctors: [<br/>         ...state.doctors,<br/>         {<br/>           name: action.name,<br/>           age: action.age,<br/>           department: action.department,<br/>           telecom: action.telecom<br/>         }<br/>       ]<br/>     });<br/>   default:<br/>     return state;<br/> }<br/>}</pre>
<p>In the preceding snippet, we have defined <kbd>ADD_NEW_DOCTOR_REQUEST</kbd> in the actions. We can check the action type for deleting the doctor's record. Go ahead and add a reducer use case for deleting a doctor.</p>
<p>Now, your task is to check the initial state of the CMS system and write reducer functions for <kbd>CREATE_POST</kbd>, <kbd>EDIT_POST</kbd>, and <kbd>SET_FILTER</kbd>. Once you have finished writing the reducer function, it should look something like the following:</p>
<pre class="mce-root"><span>import { CREATE_POST, EDIT_POST, SET_FILTER } from './actionTypes'</span><br/><br/><span>function postsReducer (state = [], action) {</span><br/><span> switch (action.type) {</span><br/><span>   case CREATE_POST: {</span><br/><span>     const { type, ...post } = action</span><br/><span>     return [ ...state, post ]</span><br/><span>   }</span><br/><br/><span>   case EDIT_POST: {</span><br/><span>     const { type, id, ...newPost } = action</span><br/><span>     return state.map((oldPost, index) =&gt;</span><br/><span>       action.id === index</span><br/><span>         ? { ...oldPost, ...newPost }</span><br/><span>         : oldPost</span><br/><span>     )</span><br/><span>   }</span><br/><br/><span>   default:</span><br/><span>     return state</span><br/><span> }</span><br/><span>}</span></pre>


            </article>

            
        </section>
    </div>



  </body>
</html>