<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Passing the subset of the state to a component</h1>
                </header>
            
            <article>
                
<p>Once we get the response from the API, we will show the information in the UI. To do so, we need to get a subset of the state from the store. And how do we do that? Well, we have already discussed that in <a href="6ece34d6-d944-4f1f-9f2f-59469c3aee4e.xhtml" target="_blank">Chapter 5</a>, <em>React with Redux</em>, using selectors. Now, let's get the selectors to get an authenticated user and show a welcome message on the screen. </p>
<p>Create a selector file inside <kbd>app/containers/App/selectors.js</kbd>. There is a reason why we are keeping the selector file in the App container and not inside the Login container. This is so we can detect whether <span>a user is logged in or not </span>before sending the user to the login page or dashboard. We are going to use the same selector for both the App and the Login container:</p>
<pre>import { createSelector } from 'reselect';<br/><br/>const selectGlobal = state =&gt; state.get('global');<br/><br/>const makeSelectCurrentUser = () =&gt;<br/>  createSelector(<br/>    selectGlobal,<br/>    globalState =&gt;<br/>      globalState.get('currentUser')<br/>        ? globalState.get('currentUser').toJS()<br/>        : {},<br/>  );<br/><br/>const makeSelectLogedIn = () =&gt;<br/>  createSelector(<br/>    selectGlobal,<br/>    globalState =&gt; !!globalState.getIn(['currentUser', 'id']),<br/>  );<br/><br/>const makeSelectLoading = () =&gt;<br/>  createSelector(selectGlobal, globalState =&gt; globalState.get('loading'));<br/><br/>const makeSelectError = () =&gt;<br/>  createSelector(selectGlobal, globalState =&gt; globalState.get('error'));<br/><br/>export {<br/>  selectGlobal,<br/>  makeSelectLogedIn,<br/>  makeSelectCurrentUser,<br/>  makeSelectLoading,<br/>  makeSelectError,<br/>};</pre>
<p>Note the following important aspects:</p>
<ol>
<li>We are using <kbd>createSelector</kbd> from <kbd>reselect</kbd>. We have already discussed how it works in <a href="6ece34d6-d944-4f1f-9f2f-59469c3aee4e.xhtml" target="_blank">Chapter 5</a>, <em>React with Redux</em>. Since we are using <kbd>immutable.js</kbd>, we get a subset of the state using the <kbd>get</kbd> method. For example, in order to get the global state, we need to state <kbd>const selectGlobal = state =&gt; state.get('global');</kbd> </li>
<li>Now, we create different selectors to select the global state, select if a user is logged in or not, select the current user, select if the application is loading or not, and finally select if there are any errors or not. Pretty straightforward. </li>
<li class="mce-root"><span>Now, if the user is logged in, we need to take the user to the home page. That is how an authentication system should work. So, inside</span> <kbd>app/containers/Login/index.js</kbd><span>, we add</span> <kbd>mapStateToProps</kbd> <span>with an appropriate selector function. Now, your <kbd>Login</kbd> container should look like this:</span></li>
</ol>
<pre style="color: black;padding-left: 90px">export const mapStateToProps = createStructuredSelector({<br/>  isLoggedIn: makeSelectLogedIn(),<br/>});<br/><br/>export const mapDispatchToProps = dispatch =&gt; ({<br/>  onSubmit: e =&gt; dispatch(onLoginRequest(e.toJS())),<br/>});<br/><br/>const withConnect = connect(<br/>  mapStateToProps,<br/>  mapDispatchToProps,<br/>);<br/><br/>const withSaga = injectSaga({ key: 'login', saga });<br/><br/>export default compose(<br/>  withSaga,<br/>  withConnect,<br/>)(LoginPage);</pre>
<ol start="4">
<li class="mce-root"><span>In addition to this, we need to check whether the user is logged in or not. We can use <kbd>componentDidMount</kbd> and <kbd>componentDidUpdate</kbd> to achieve that. However, in the recent version of React, these life cycle functions are removed and hooks are introduced. Inside the</span> <kbd>Login</kbd> <span>container we have the following life cycle methods: </span></li>
</ol>
<pre style="color: black;padding-left: 90px">componentDidMount() {<br/>    if (this.props.isLoggedIn) {<br/>      this.props.history.push('/');<br/>    }<br/>  }<br/><br/>  componentDidUpdate() {<br/>    if (this.props.isLoggedIn) {<br/>      this.props.history.push('/');<br/>    }<br/>  }</pre>
<p style="padding-left: 60px" class="mce-root">With this done, we should have a complete <span>working </span>login flow. Try to log in with the wrong credentials to see if the errors are being caught. If there is an error, the API should respond like this:</p>
<pre style="padding-left: 60px">{<br/>    "status":401,<br/>    "message":"Authentication failed. Invalid user or password.",<br/>    "errors":{},<br/>    "success":false<br/>}</pre>


            </article>

            
        </section>
    </div>



  </body>
</html>