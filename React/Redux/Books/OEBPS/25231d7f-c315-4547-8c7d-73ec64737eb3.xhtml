<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Creating Saga</h1>
                </header>
            
            <article>
                
<p>When a user enters their login credentials and hits the <span class="packt_screen">submit</span> button, we are already dispatching the correct action. Now we are going to listen to that action using Saga. To do so, we create our first Saga inside <kbd>app/Login/saga.js</kbd>:</p>
<pre>import request from 'utils/request';<br/>import { notification } from 'antd';<br/>import { call, put, takeLatest } from 'redux-saga/effects';<br/>import { LOGIN_REQUEST } from './constants';<br/>import { onLoginSuccess, onLoginFailure } from './actions';<br/><br/>export function* onLoginRequest(action) {<br/>  try {<br/>    const { success, user, message } = yield call(request, 'api/users/signin', {<br/>      method: 'POST',<br/>      headers: {<br/>        'Content-Type': 'application/json',<br/>      },<br/>      body: JSON.stringify(action),<br/>    });<br/><br/>    if (!success) {<br/>      throw message;<br/>    }<br/><br/>    yield put(onLoginSuccess(user));<br/>  } catch (err) {<br/>    notification.error({<br/>      message: 'Login Failure',<br/>      description: err.toString(),<br/>    });<br/><br/>    yield put(onLoginFailure(err.toString()));<br/>  }<br/>}<br/><br/>export default function* data() {<br/>  yield takeLatest(LOGIN_REQUEST, onLoginRequest);<br/>}</pre>
<p class="mce-root">Does the snippet look like quite a mouthful? Well, don't worry about it. It is just a matter of time until you get used to Saga functions. Note the following things:</p>
<ul>
<li>Redux Saga provides some important factory functions (<kbd>call</kbd>, <kbd>put</kbd>, and <kbd>takeLatest</kbd>) to request, call, and observe actions. <kbd>takeLatest</kbd> is a helper factory function from Saga that triggers a new generator <kbd>data</kbd> function.</li>
<li class="mce-root"><span>If you remember the Login container, we dispatched the </span><kbd>onLoginRequest</kbd> <span>action creator when the user submits the form:</span></li>
</ul>
<pre style="color: black;padding-left: 60px">export const mapDispatchToProps = dispatch =&gt; ({<br/>  onSubmit: e =&gt; dispatch(onLoginRequest(e.toJS())),<br/>});</pre>
<ul>
<li class="mce-root"><span>The</span> <kbd>onLoginRequest</kbd> <span>function </span><span>dispatches a <kbd>LOGIN_REQUEST</kbd> action</span><span>. There is nothing new here:</span></li>
</ul>
<pre style="color: black;padding-left: 60px">export const onLoginRequest = user =&gt; ({ type: LOGIN_REQUEST, user });</pre>
<ul>
<li class="mce-root">In the Saga snippet, we are observing the <kbd>LOGIN_REQUEST</kbd> action continuously. That is, whenever the user dispatches this action, the <kbd>onLoginRequest</kbd> <span>generator function </span>will be called. </li>
<li>The <kbd>onLoginRequest</kbd> <span>generator function </span>inside the <kbd>Saga</kbd> file takes the action as an argument and makes the REST API request using a factory function <kbd>call</kbd> from the Saga. </li>
<li class="mce-root"><span>Note that we have also created a utility function called</span> <kbd>request</kbd><span>, which will help us call the API. If you check the request function (in the following snippet), it takes a request URL and options as arguments. For example, when making a login request, the URL would be</span> <kbd>http://localhost:3000/api/users/signin</kbd> <span>and the options include</span> <kbd>POST</kbd> <span>as the HTTP method, headers, and body. The request function uses</span> the <kbd>fetch</kbd> <span>method to make an API call:</span></li>
</ul>
<pre style="color: black;padding-left: 90px">function parseJSON(response) {<br/>  if (response.status === 204 || response.status === 205) {<br/>    return null;<br/>  }<br/>  return response.json();<br/>}<br/><br/>function checkStatus(response) {<br/>  if (response.status &gt;= 200 &amp;&amp; response.status &lt; 300) {<br/>    return response;<br/>  }<br/><br/>  const error = new Error(response.statusText);<br/>  error.response = response;<br/>  throw error;<br/>}<br/><br/>export default function request(url, options) {<br/>  return fetch(url, options)<br/>    .then(checkStatus)<br/>    .then(parseJSON);<br/>}</pre>
<ul>
<li>It is essential that we wrap the HTTP request call inside a <kbd>try</kbd> and <kbd>catch</kbd> block to handle all sorts of exceptions that may occur during the <kbd>fetch</kbd> request. </li>
<li>The <kbd>request</kbd> function makes the call and receives <kbd>success</kbd>, <kbd>user</kbd>, and <kbd>message</kbd> as the return values. We save them in separate variables and if <kbd>success</kbd> is <kbd>true</kbd>, we invoke the <kbd>onLoginSuccess</kbd> action creator. </li>
<li>If the API throws an error, we catch the errors in the Saga and invoke the <kbd>onLoginFailure</kbd> action creator. It is worth noting that instead of invoking the asynchronous request directly, the <kbd>call</kbd> <span>factory function </span>returns only a plain object with instructions for the middleware to dispatch the action. <kbd>redux-saga</kbd> takes care of the invocation and returns the result to the generator. The <kbd>put</kbd> <span>factory function </span>works in a similar fashion. For example, if there is an error, the <kbd>put</kbd> method will give a plain object as instruction, that is, <kbd>{ type: LOGIN_FAILURE, message }</kbd>, which tells the Saga middleware to dispatch the <kbd>LOGIN_FAILURE</kbd> action with a proper message. </li>
<li>We have also utilized the <kbd>notification</kbd> component from <kbd>antd</kbd> to notify the users with proper alerts. </li>
</ul>
<p>Now, the last piece of the puzzle is to provide a Saga to the store. Remember, we have already connected the Redux middleware to the store. To inject Saga to the Login container, we are going to use a higher-order function. So, inside <kbd>app/containers/Login/index.js</kbd>, we will inject Saga:</p>
<pre>const withSaga = injectSaga({ key: 'login', saga });<br/><br/>export default compose(<br/>  withSaga,<br/>  withConnect,<br/>)(LoginPage);</pre>
<p><kbd>injectSaga</kbd> is provided in <kbd>app/utils/injectSaga.js</kbd>. The function takes the Saga key and file and injects it into the <kbd>container</kbd> component. If you want to know how this works, look at the code found in the file:</p>
<pre>import React from 'react';<br/>import PropTypes from 'prop-types';<br/>import hoistNonReactStatics from 'hoist-non-react-statics';<br/><br/>import getInjectors from './sagaInjectors';<br/><br/>export default ({ key, saga, mode }) =&gt; WrappedComponent =&gt; {<br/>  class InjectSaga extends React.Component {<br/>    static WrappedComponent = WrappedComponent;<br/><br/>    static contextTypes = {<br/>      store: PropTypes.object.isRequired,<br/>    };<br/><br/>    static displayName = `withSaga(${WrappedComponent.displayName ||<br/>      WrappedComponent.name ||<br/>      'Component'})`;<br/><br/>    componentWillMount() {<br/>      const { injectSaga } = this.injectors;<br/><br/>      injectSaga(key, { saga, mode }, this.props);<br/>    }<br/><br/>    componentWillUnmount() {<br/>      const { ejectSaga } = this.injectors;<br/><br/>      ejectSaga(key);<br/>    }<br/><br/>    injectors = getInjectors(this.context.store);<br/><br/>    render() {<br/>      return &lt;WrappedComponent {...this.props} /&gt;;<br/>    }<br/>  }<br/><br/>  return hoistNonReactStatics(InjectSaga, WrappedComponent);<br/>};</pre>
<p class="mce-root">The <kbd>injectSaga</kbd> function takes <kbd>key</kbd>, <kbd>saga</kbd>, and <kbd>mode</kbd> as arguments, where <kbd>key</kbd> is the name of the saga key, <kbd>saga</kbd> is the path of the <kbd>Saga</kbd> file, and <kbd>mode</kbd> has a default value of <kbd>RESTART_ON_REMOUNT</kbd>. </p>
<p>A <kbd>mode</kbd> argument can take three constants:</p>
<ul>
<li><kbd>RESTART_ON_REMOUNT</kbd>: <kbd>mode</kbd> starts a Saga when a component is being mounted and cancels with <kbd>task.cancel()</kbd> when a component is un-mounted to improve performance. </li>
<li><kbd>DAEMON</kbd>: <kbd>mode</kbd> <span>starts a Saga when a component is mounted and never cancels it or starts again.</span></li>
<li><kbd>ONCE_TILL_UNMOUNT</kbd>: <kbd>mode</kbd> is similar to <kbd>RESTART_ON_REMOUNT</kbd> but it does not run the Saga again. </li>
</ul>
<p class="mce-root">We are now ready to test our login system. So, try to run your application. To do so, first make sure you have your MongoDB instance running. After that, from the root of the project in your console, run <kbd>yarn start</kbd>. Open the browser console (<a href="https://support.airtable.com/hc/en-us/articles/232313848-How-to-open-the-developer-console" target="_blank">https://support.airtable.com/hc/en-us/articles/232313848-How-to-open-the-developer-console</a>). Go to<span> the </span><span class="packt_screen">Network</span><span> </span>tab and choose<span> </span>the <span class="packt_screen">XHR</span><span> </span>tab. With that open, enter the login credentials and hit <em>Enter</em>:</p>
<pre><span>{<br/>    "email":"admin@rasklege.com",<br/>    "password":"123123"<br/>}</span></pre>
<p class="mce-root"><span>If you did everything correctly, you should be able to see the correct request and response format, as shown in the following screenshot:</span></p>
<p class="CDPAlignCenter CDPAlign"><img src="Images/b06575fe-261d-4970-9312-1431a08edaf9.png" style="width:91.50em;height:40.50em;" width="1950" height="864"/></p>
<div class="CDPAlignCenter CDPAlign packt_figref">Figure 6.3: Request and response in the browser console</div>


            </article>

            
        </section>
    </div>



  </body>
</html>