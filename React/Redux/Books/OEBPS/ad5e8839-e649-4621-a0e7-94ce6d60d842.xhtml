<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Project structure</h1>
                </header>
            
            <article>
                
<p>The complete code for the backend server is available in <kbd>CH07/server</kbd>. In this chapter, we are going to understand how the REST API can be built. Start with an empty folder and follow these steps:</p>
<ol>
<li>Initiate the project with <kbd>yarn init</kbd> or by creating a <kbd>package.json</kbd> file. We are already familiar with the process of adding and removing any <kbd>npm</kbd> packages from the project. Simply copy the <kbd>package.json</kbd> file from <kbd>CH08</kbd> into your new project folder. </li>
<li>Create a folder called <kbd>server</kbd> where we can place all our backend logic. We are going to use the <kbd>express</kbd> framework to create backend. Inside the <kbd>server</kbd> folder, create a file called <kbd>index.js</kbd>. Inside the file, we initiate the <kbd>express</kbd> server with the required parameter, as follows: </li>
</ol>
<pre style="padding-left: 60px">/* eslint consistent-return:0 import/order:0 */<br/><br/>const path = require('path');<br/>const express = require('express');<br/>const cookieParser = require('cookie-parser');<br/>const methodOverride = require('method-override');<br/>const session = require('express-session');<br/>const bodyParser = require('body-parser');<br/>const moduleAlias = require('module-alias');<br/>moduleAlias.addAlias('@server', __dirname);<br/><br/>const logger = require('./logger');<br/><br/>const argv = require('./argv');<br/>const port = require('./port');<br/><br/>const app = express();<br/>require('./helpers/prototype');<br/><strong>require('./models');</strong><br/><br/>const secret = process.env.SECRET || 'AAdasds23djasd3ASd2ss@';<br/><br/>app.use(bodyParser.json({ limit: '50mb' }));<br/>app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));<br/>app.use(cookieParser());<br/>app.use(methodOverride('X-HTTP-Method-Override'));<br/>app.use(session({ secret, resave: false, saveUninitialized: true }));<br/>app.use(express.static(path.join(__dirname, '../build/')));<br/><br/>require('./api')(app);<br/><br/>const customHost = argv.host || process.env.HOST;<br/>const host = customHost || null;<br/>const prettyHost = customHost || 'localhost';<br/><br/>app.get('*.js', (req, res, next) =&gt; {<br/>  req.url = req.url + '.gz'; // eslint-disable-line<br/>  res.set('Content-Encoding', 'gzip');<br/>  next();<br/>});<br/><br/>app.listen(port, host, async err =&gt; {<br/>  if (err) {<br/>    return logger.error(err.message);<br/>  }<br/><br/>  logger.appStarted(port, prettyHost);<br/>});</pre>
<p style="padding-left: 60px">We are using <kbd>cookie-parser</kbd> to store the token of a logged-in user. We also added our root of the models folder, <kbd>require('./models')</kbd>. In the root model's folder, we will connect to the <kbd>MongoDB</kbd> database. </p>
<ol start="3">
<li>Use a <kbd>logger.js</kbd> file to log messages on the Terminal. Create a <kbd>logger.js</kbd> file inside <kbd>CH08/server/logger.js</kbd>:</li>
</ol>
<pre style="padding-left: 60px">/* eslint-disable no-console */<br/><br/>const chalk = require('chalk');<br/>const ip = require('ip');<br/><br/>const divider = chalk.gray('\n-----------------------------------');<br/><br/>const logger = {<br/>  error: err =&gt; {<br/>    console.error(chalk.red(err));<br/>  },<br/><br/>  appStarted: (port, host) =&gt; {<br/>    console.log(`Server started ! ${chalk.green('✓')}`);<br/><br/>    console.log(`<br/>${chalk.bold('Access URLs:')}${divider}<br/>Localhost: ${chalk.magenta(`http://${host}:${port}`)}<br/>LAN: ${chalk.magenta(`http://${ip.address()}:${port}`)}${divider}<br/>${chalk.blue(`Press ${chalk.italic('CTRL-C')} to stop`)}<br/>    `);<br/>  },<br/>};<br/><br/>module.exports = logger;</pre>
<ol start="4">
<li>Use the provided port or default port of <kbd>3000</kbd>. The logic goes inside the <kbd>port.js</kbd> file, inside <kbd>CH08/server/port.js</kbd>:</li>
</ol>
<pre style="padding-left: 60px">const argv = require('./argv');<br/><br/>module.exports = parseInt(argv.port || process.env.PORT || '3000', 10);</pre>
<ol start="5">
<li>Create a new file, <kbd>argv.js</kbd>, inside <kbd>CH08/server/argv.js</kbd>. We are going to use the <kbd>minimist</kbd> package, which helps to parse argument options:</li>
</ol>
<pre style="padding-left: 60px">module.exports = require('minimist')(process.argv.slice(2));</pre>
<ol start="6">
<li>Create a <kbd>models</kbd> folder. Create an <kbd>index.js</kbd> file inside it. We are going to connect to MongoDB inside it (we installed MongoDB in <a href="15bbf065-c5aa-499f-8176-a1d7650345b4.xhtml" target="_blank">Chapter 6</a>, <em>Extending Redux by Middleware</em>. If you don't have it, read more about how to install MongoDB <span>at</span> <a href="https://www.mongodb.com/">https://www.mongodb.com/</a> or follow the instructions in <a href="15bbf065-c5aa-499f-8176-a1d7650345b4.xhtml" target="_blank">Chapter 6</a>, <em>Extending Redux by Middleware</em>):</li>
</ol>
<pre style="padding-left: 60px">const fs = require('fs');<br/>const path = require('path');<br/>const mongoose = require('mongoose');<br/>const mongooseDelete = require('mongoose-delete');<br/><br/>const uristring = process.env.MONGODB_URI || 'mongodb://localhost/rask-lege';<br/><br/>mongoose.connect(<br/>  uristring,<br/>  err =&gt;<br/>    console.log(<br/>      err<br/>        ? `ERROR, connecting to: ${uristring}. ${err}`<br/>        : `Succeeded connected to: ${uristring}`,<br/>    ),<br/>);<br/><br/>const db = {};<br/><br/>fs.readdirSync(__dirname)<br/>  .filter(<br/>    file =&gt;<br/>      file.indexOf('.') !== 0 &amp;&amp;<br/>      file !== 'index.js' &amp;&amp;<br/>      file !== 'migrations' &amp;&amp;<br/>      file !== 'seeds.js',<br/>  )<br/>  .forEach(file =&gt; {<br/>    // eslint-disable-next-line global-require<br/>    const model = require(path.join(__dirname, file))(mongoose, mongooseDelete);<br/>    db[model.collection.collectionName] = model;<br/>  });<br/><br/>module.exports = db;</pre>
<p style="padding-left: 60px">At the end of this, your folder structure should look like the following screenshot:</p>
<p> </p>
<p class="CDPAlignCenter CDPAlign"><img src="Images/bde89bb0-70b9-4f6a-ae79-18e84b0c50e6.png" style="width:13.25em;height:21.92em;" width="526" height="868"/></p>
<div class="CDPAlignCenter CDPAlign packt_figref">Figure 8.1 - Project folder structure</div>
<p style="padding-left: 60px" class="CDPAlignLeft CDPAlign">Mongoose (<a href="https://mongoosejs.com/">https://mongoosejs.com/</a>) is a MongoDB object-modeling tool that is created to function in an asynchronous environment. Installing <kbd>mongoose</kbd> is straightforward, as follows: </p>
<pre style="padding-left: 60px"><strong>yarn add mongoose --exact</strong><br/>or<strong> </strong><br/><strong>npm install mongoose <span>--save-exact<br/></span></strong></pre>
<ol start="7">
<li>Let's create our first users model and add a schema to it. Inside the <kbd>models</kbd> folder, create a file called <kbd>users.js</kbd> (you can read more about the list of available data types for defining schema on the MongoDB documentation website):</li>
</ol>
<pre style="padding-left: 60px">module.exports = (mongoose, mongooseDelete) =&gt; {<br/>  const Schema = new mongoose.Schema(<br/>    {<br/>      email: {<br/>        type: String,<br/>        trim: true,<br/>        unique: true,<br/>      },<br/>      username: String,<br/>      password: String,<br/>      loginKey: String,<br/>      secondaryEmail: String,<br/>      active: {<br/>        type: Boolean,<br/>        default: false,<br/>      },<br/>      name: String,<br/>      telecom: [<br/>        {<br/>          use: String,<br/>          rank: Number,<br/>          value: String,<br/>          system: String,<br/>          period: String,<br/>        },<br/>      ],<br/>      birthDate: Date,<br/>      gender: {<br/>        type: String,<br/>        default: 'other',<br/>        enum: ['male', 'female', 'other'],<br/>      },<br/>      role: {<br/>        type: String,<br/>        default: 'user',<br/>        enum: ['user', 'practitioner', 'patient', 'admin'],<br/>      },<br/>      address: [<br/>        {<br/>          use: String,<br/>          type: String,<br/>          text: String,<br/>          line: String,<br/>          city: String,<br/>          district: String,<br/>          state: String,<br/>          postalCode: String,<br/>          country: String,<br/>          period: String,<br/>        },<br/>      ],<br/>      photo: String,<br/>      language: String,<br/>      preferredLanguage: String,<br/>      maritalStatus: {<br/>        type: String,<br/>        enum: ['married', 'unmarried', 'divorced', 'separated', <br/>      'widow'],<br/>      },<br/>      qualifications: [String],<br/>    },<br/>    {<br/>      timestamps: true,<br/>    },<br/>  );</pre>
<ol start="8">
<li>Create another folder called <kbd>helpers</kbd>, and create a file inside it named <kbd>prototype.js</kbd>. We will add utility functions inside it so that we can use it later. We have added a new method, <kbd>humanize</kbd>, in the <kbd>String</kbd> class, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype:</a></li>
</ol>
<pre style="padding-left: 60px">/* eslint-disable */<br/><br/>String.prototype.humanize = function () {<br/> return this.replace(/(?:_| |\b)(\w)/g, function(key, p1) {<br/> return p1.toUpperCase()<br/> });<br/>};</pre>
<ol start="9">
<li>Create a routing file inside <kbd>server/api/index.js</kbd>. We are going to write all our endpoints in this file:</li>
</ol>
<pre style="padding-left: 60px">const express = require('express');<br/>const User = require('./user');<br/>const Practitioner = require('./practitioner');<br/><br/>const { authenticate, injectUserToReq } = require('../helpers/auth');<br/><br/>module.exports = app =&gt; {<br/>  const router = express.Router();<br/>  const routerAuth = express.Router();<br/><br/>  router.post('/users', User.signup);<br/>  router.post('/users/signin', User.signin);<br/><br/>  routerAuth.get('/users/auth', User.auth);<br/>  routerAuth.get('/users', User.index);<br/>  routerAuth.get('/users/:id', User.show);<br/>  routerAuth.put('/users/:id', User.update);<br/>  routerAuth.delete('/users/:id', User.destroy);<br/><br/>  router.get('/practitioners', Practitioner.index);<br/>  routerAuth.post('/practitioners', Practitioner.create);<br/>  routerAuth.put('/practitioners/:id', Practitioner.update);<br/>  routerAuth.delete('/practitioners/:id', Practitioner.destroy);<br/><br/>  app.use('/api', injectUserToReq, router);<br/>  app.use('/api', authenticate, routerAuth);<br/>};</pre>
<p class="mce-root">The following table specifies the operations of our API in detail:</p>
<table style="border-collapse: collapse;width: 100%" border="1">
<tbody>
<tr>
<td><strong>Method</strong></td>
<td><strong>URI</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td><kbd>GET</kbd></td>
<td><kbd>/users</kbd></td>
<td>Retrieves all the available users</td>
</tr>
<tr>
<td><kbd>GET</kbd></td>
<td><kbd>/users/auth</kbd></td>
<td>Retrieves the authenticated users</td>
</tr>
<tr>
<td><kbd>GET</kbd></td>
<td><kbd>/users/:id</kbd></td>
<td>Retrieve the user with the ID identifier</td>
</tr>
<tr>
<td><kbd>GET</kbd></td>
<td><kbd>/practitioners</kbd></td>
<td>Retrieves the list of medical practitioners </td>
</tr>
<tr>
<td><kbd>POST</kbd></td>
<td><kbd>/users</kbd></td>
<td>Creates a user with the given information</td>
</tr>
<tr>
<td><kbd>POST</kbd></td>
<td><kbd>/users/signin</kbd></td>
<td>Signs in a user with the given credentials</td>
</tr>
<tr>
<td><kbd>POST</kbd></td>
<td><kbd>/practitioners</kbd></td>
<td>Creates a new medical practitioner</td>
</tr>
<tr>
<td><kbd>PUT</kbd></td>
<td><kbd>/users/:id</kbd></td>
<td>Updates a user</td>
</tr>
<tr>
<td><kbd>PUT</kbd></td>
<td><kbd>/practitioners/:id</kbd></td>
<td>Updates a practitioner</td>
</tr>
<tr>
<td><kbd>DELETE</kbd></td>
<td><kbd>/users/:id</kbd></td>
<td>Deletes an existing user</td>
</tr>
<tr>
<td><kbd>DELETE</kbd></td>
<td><kbd>/practitioners/:id</kbd></td>
<td>
<p class="mce-root">Deletes an existing practitioner</p>
</td>
</tr>
</tbody>
</table>
<div class="CDPAlignCenter CDPAlign packt_figref">Table 8.1: List of endpoints </div>


            </article>

            
        </section>
    </div>



  </body>
</html>