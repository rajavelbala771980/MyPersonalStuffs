<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Register page</h1>
                </header>
            
            <article>
                
<p>We're going to apply the same logic we used to create the login form and create a register page. The register page should look like the screenshot given as follows:</p>
<p class="CDPAlignCenter CDPAlign"><img src="Images/d0294181-7106-4429-9917-82bb18115443.png" width="308" height="341"/></p>
<div class="CDPAlignCenter CDPAlign packt_figref">Figure 5.3: Register Page</div>
<ol>
<li>Create a container:</li>
</ol>
<p style="padding-left: 60px">Let's first create the container inside <kbd>app/containers/Register/index.js</kbd>. We already have this file created from <a href="1c7ddbcd-e0b6-421c-8e8a-b4da4b85cf64.xhtml" target="_blank">Chapter 4</a>, <em><span class="cdp-organizer-chapter-title"><span class="cdp-organize-title-label">Concept of Immutability</span></span></em>. This <kbd>index.js</kbd> page is being called by the main container file <kbd>app/containers/App/index.js</kbd>. The container component will load the registration form, as follows:</p>
<pre style="padding-left: 60px">import React, { Component } from 'react';<br/>import Form from './Form';<br/><br/>/* eslint-disable react/prefer-stateless-function */<br/>class RegisterPage extends Component {<br/>  render() {<br/>    return (<br/>      &lt;div className="register-containers"&gt;<br/>        &lt;Form onSubmit={() =&gt; {}} /&gt;<br/>      &lt;/div&gt;<br/>    );<br/>  }<br/>}<br/><br/>export default RegisterPage;</pre>
<ol start="2">
<li>Create the register form:</li>
</ol>
<p style="padding-left: 60px">Note that the registration form uses a Redux form to create the form. It also loads CSS files fromÂ <kbd>style.css</kbd>. For now, our focus is not about the CSS file. So, go ahead and use them for this project. Moreover, we have the validation logic written that ensures validation for <kbd>email</kbd>, <kbd>password</kbd>, and <kbd>name</kbd>, as follows:</p>
<pre style="padding-left: 60px">import React from 'react';<br/>import PropTypes from 'prop-types';<br/>import { Form, Button, Spin } from 'antd';<br/>import { Field, reduxForm } from 'redux-form/immutable';<br/>import renderInput from 'components/Form/Fields/input';<br/>import { validate } from './validate';<br/>import './style.css';<br/><br/>const RegisterForm = props =&gt; {<br/>  const { handleSubmit, pristine, submitting, message } = props;<br/><br/>  return (<br/>    &lt;Form onSubmit={handleSubmit} className="form-register-containers"&gt;<br/>      &lt;Spin spinning={submitting} tip="Submitting..."&gt;<br/>        &lt;h1 className="center"&gt;<br/>          Register an account &lt;br /&gt;<br/>          to Rask Lege<br/>        &lt;/h1&gt;<br/>        &lt;Field<br/>          name="email"<br/>          hasFeedback<br/>          component={renderInput}<br/>          disabled={submitting}<br/>          label="Email"<br/>          placeholder="Email"<br/>        /&gt;<br/>        &lt;Field<br/>          hasFeedback<br/>          type="password"<br/>          name="password"<br/>          component={renderInput}<br/>          disabled={submitting}<br/>          label="Password"<br/>          placeholder="Password"<br/>        /&gt;<br/>        &lt;Field<br/>          hasFeedback<br/>          type="password"<br/>          name="confirmPassword"<br/>          component={renderInput}<br/>          disabled={submitting}<br/>          label="Confirm Password"<br/>          placeholder="Confirm Password"<br/>        /&gt;<br/>        &lt;Field<br/>          hasFeedback<br/>          name="name"<br/>          component={renderInput}<br/>          disabled={submitting}<br/>          label="Name"<br/>          placeholder="Full Name"<br/>        /&gt;<br/>        &lt;Form.Item className="center"&gt;<br/>          &lt;Button<br/>            type="primary"<br/>            htmlType="submit"<br/>            className="btn-submit"<br/>            disabled={pristine || submitting}<br/>          &gt;<br/>            Create an account<br/>          &lt;/Button&gt;<br/>        &lt;/Form.Item&gt;<br/>        {!!message &amp;&amp; &lt;p className="caption-invalid"&gt;{message}&lt;/p&gt;}<br/>      &lt;/Spin&gt;<br/>    &lt;/Form&gt;<br/>  );<br/>};<br/><br/>RegisterForm.propTypes = {<br/>  pristine: PropTypes.bool,<br/>  message: PropTypes.string,<br/>  submitting: PropTypes.bool,<br/>  handleSubmit: PropTypes.func,<br/>};<br/><br/>export default reduxForm({<br/>  form: 'register-form',<br/>  validate,<br/>})(RegisterForm);</pre>
<p>The validation code validates and ensures that the users registering in the application meet the criteria as specified. Failure to comply with this requirement will trigger the validation error as shown in the following screenshot and disable the form submission:</p>
<p class="CDPAlignCenter CDPAlign"><img src="Images/f7fd00cd-366b-453d-b9b5-714589b8b694.png" style="width:25.75em;height:20.08em;" width="512" height="398"/></p>
<div class="CDPAlignCenter CDPAlign packt_figref">Figure 5.4: Register page validation logic</div>
<p>Here's the logic for validation. The validation code is written in a separateÂ <kbd>validate.js</kbd>Â file, as follows:</p>
<pre style="padding-left: 60px">const validate = values =&gt; {<br/>  const errors = {};<br/>  if (!values.get('email')) {<br/>    errors.email = 'Required';<br/>  } else if (<br/>    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.get('email'))<br/>  ) {<br/>    errors.email = 'Invalid email address';<br/>  }<br/>  if (!values.get('password')) {<br/>    errors.password = "Password can't be blank";<br/>  }<br/><br/>  if (!values.get('confirmPassword')) {<br/>    errors.confirmPassword = "Confirm password can't be blank";<br/>  }<br/><br/>  if (<br/>    values.get('password') &amp;&amp;<br/>    values.get('confirmPassword') &amp;&amp;<br/>    values.get('password') !== values.get('confirmPassword')<br/>  ) {<br/>    errors.confirmPassword = "Confirm password didn't match";<br/>  }<br/><br/>  if (!values.get('name')) {<br/>    errors.name = "Name can't be blank";<br/>  }<br/><br/>  return errors;<br/>};</pre>


            </article>

            
        </section>
    </div>



  </body>
</html>