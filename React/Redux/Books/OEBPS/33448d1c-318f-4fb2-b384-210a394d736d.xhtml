<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Login page reducer</h1>
                </header>
            
            <article>
                
<p>We've already discussed what a reducer is and what it does. In this section, we are simply going to set up a reducer for login. Create a <kbd>reducer.js</kbd> file inside <kbd>app/containers/App</kbd>. Since we are dealing with immutable JS, as discussed in <a href="f0ae2d58-7671-4ee1-91ff-19b3f5218ac3.xhtml" target="_blank">Chapter 2</a>, <em>Testing</em>:</p>
<pre>import { fromJS } from 'immutable';<br/>import Cookie from 'js-cookie';<br/><br/>import {<br/>  LOGIN_REQUEST,<br/>  LOGIN_SUCCESS,<br/>  LOGIN_FAILURE,<br/>  LOGOUT_REQUEST,<br/>} from 'containers/Login/constants';<br/><br/>// The initial state of the App<br/>const initialState = fromJS({<br/>  loading: false,<br/>  currentUser: {},<br/>});<br/><br/>function appReducer(state = initialState, action) {<br/>  switch (action.type) {<br/>    case LOGIN_FAILURE:<br/>    case LOGIN_REQUEST:<br/>    case LOGOUT_REQUEST: {<br/>      Cookie.remove('token');<br/>      return state.set('loading', true).set('currentUser', fromJS({}));<br/>    }<br/>    case LOGIN_SUCCESS:<br/>      Cookie.set('token', action.user.token, { expires: 7 });<br/>      return state.set('loading', true).set('currentUser', fromJS(action.user));<br/>    default:<br/>      return state;<br/>  }<br/>}<br/><br/>export default appReducer;</pre>
<p class="mce-root">This is pretty straightforward, right. The <kbd>appReducer</kbd> function takes state and action. Based on different action types, it changes the state if required. There are two cases of this as follows:</p>
<ul>
<li class="mce-root">In the case of a login request, or failure, or logout request, we are going to remove any cookie that is stored. Read more about JavaScript cookies here: <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie" target="_blank">https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie</a>. </li>
<li>In the case of login success, we are going to store the token and expiration time in the cookie and return the state with the current user returned from the API request. </li>
</ul>
<p>Now, having the reducer defined, we need to connect this reducer to the root reducer inside the main <kbd>reducers.js</kbd> file. The main reducer file should look like the snippet given as follows. The changed code is rendered in bold to easily understand what has been added:</p>
<pre>import { combineReducers } from 'redux-immutable';<br/>import { connectRouter } from 'connected-react-router/immutable';<br/>import { reducer as formReducer } from 'redux-form/immutable';<br/><br/>import history from 'utils/history';<br/><strong>import globalReducer from 'containers/App/reducer';</strong><br/><br/>export default function createReducer(injectedReducers = {}) {<br/>  const rootReducer = combineReducers({<br/>    form: formReducer,<br/>    <strong>global: globalReducer,</strong><br/>    ...injectedReducers,<br/>  });<br/><br/>  const mergeWithRouterState = connectRouter(history);<br/>  return mergeWithRouterState(rootReducer);<br/>}</pre>
<p class="mce-root">We're going to add multiple reducers based on each container and requirement. The idea is very much the same. We create the reducers file in each container, and connect them in the main container. In addition to having each reducer in the same file, we can also use HPF to inject reducer in a component. The function to inject the reducer in the container component is given in <kbd>app/utils/injectReducer.js</kbd>, as follows:</p>
<pre>import React from 'react';<br/>import PropTypes from 'prop-types';<br/>import hoistNonReactStatics from 'hoist-non-react-statics';<br/><br/>import getInjectors from './reducerInjectors';<br/><br/>export default ({ key, reducer }) =&gt; WrappedComponent =&gt; {<br/>  class ReducerInjector extends React.Component {<br/>    static WrappedComponent = WrappedComponent;<br/><br/>    static contextTypes = {<br/>      store: PropTypes.object.isRequired,<br/>    };<br/><br/>    static displayName = `withReducer(${WrappedComponent.displayName ||<br/>      WrappedComponent.name ||<br/>      'Component'})`;<br/><br/>    componentWillMount() {<br/>      const { injectReducer } = this.injectors;<br/><br/>      injectReducer(key, reducer);<br/>    }<br/><br/>    injectors = getInjectors(this.context.store);<br/><br/>    render() {<br/>      return &lt;WrappedComponent {...this.props} /&gt;;<br/>    }<br/>  }<br/><br/>  return hoistNonReactStatics(ReducerInjector, WrappedComponent);<br/>};</pre>
<p class="mce-root">To learn more about how the <kbd>injectReducer</kbd> function works, check the file. In a nutshell, the factory higher-order reducer function takes the key and path to reducer file and injects to the wrapping component. In order to copy non-react specific statics from a child component to a parent component, the function uses <kbd>hoistNonReactStatics</kbd> from <kbd>hoist-non-react-statics</kbd>.</p>
<div class="packt_infobox">You can read more about hoist-non-react-statics and how it works from the main documentation site provided here: <a href="https://github.com/mridgway/hoist-non-react-statics">https://github.com/mridgway/hoist-non-react-statics</a>. </div>
<p>You can file other associated files, such as <span><kbd>reducerInjectors.js</kbd>, from the GitHub repository. If you check the code inside this file, you will understand that the idea is to inject the reducer to the main reducers so as combine all the reducers in one place. </span></p>


            </article>

            
        </section>
    </div>



  </body>
</html>