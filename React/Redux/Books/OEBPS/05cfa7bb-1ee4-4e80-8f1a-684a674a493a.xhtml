<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Defining Saga</h1>
                </header>
            
            <article>
                
<p><span>We are going to use the same endpoint </span>to list users and search users. Searching users is similar to listing users with search queries. To list users, follow these steps:</p>
<ol>
<li class="mce-root"><span>Define Saga. The Saga file is placed inside</span> <kbd>app/containers/User/saga.js</kbd><span>. Here, we have only included the Saga code to create a user. The rest of the Saga code can be found inside <kbd>CH06/app/containers/User/saga.js</kbd>. It</span> contains Saga for searching the user, removing a user, updating a user, creating a user, and checking a user's details:</li>
</ol>
<pre style="color: black;padding-left: 60px">import request from 'utils/request';<br/>import qs from 'query-string';<br/>import { notification } from 'antd';<br/>import { call, put, takeLatest } from 'redux-saga/effects';<br/>import {<br/>  USER_CREATE_REQUEST<br/>} from './constants';<br/>import {<br/>  onCreateSuccess,<br/>  onCreateFailure,<br/>} from './actions';<br/><br/>export function* onCreateRequest(action) {<br/>  try {<br/>    const { success, user, message } = yield call(request, `/api/users`, {<br/>      method: 'POST',<br/>      headers: {<br/>        'Content-Type': 'application/json',<br/>      },<br/>      body: JSON.stringify({ user: action.item }),<br/>    });<br/><br/>    if (!success) {<br/>      throw message;<br/>    }<br/><br/>    notification.success({<br/>      message: 'Create user ssucessfully',<br/>      description: `${user.name} was created`,<br/>    });<br/>    action.cb &amp;&amp; action.cb(user);<br/>    yield put(onCreateSuccess(user));<br/>  } catch (err) {<br/>    notification.error({<br/>      message: 'Create user unssucessfully',<br/>      description: err.toString(),<br/>    });<br/><br/>    yield put(onCreateFailure(err.toString()));<br/>  }<br/>}<br/>export default function* data() {<br/>  yield takeLatest(USER_CREATE_REQUEST, onCreateRequest);<br/>}</pre>
<ol start="2">
<li>Define reducers. The reducer file to search, remove, update and search users can be found in <kbd>CH06/app/containers/User/reducer.js</kbd>. In the next chapter, we are going to check how to debug each of the requests. </li>
</ol>
<ol start="3">
<li>Inject the reducers and the Saga to the root user container:</li>
</ol>
<pre style="color: black;padding-left: 60px">import React from 'react';<br/>import { compose } from 'redux';<br/>import { Switch, Route } from 'react-router-dom';<br/>import injectSaga from 'utils/injectSaga';<br/>import injectReducer from 'utils/injectReducer';<br/>import saga from './saga';<br/>import reducer from './reducer';<br/>import All from './All';<br/>import AddUser from './Add';<br/>import EditUser from './Edit';<br/><br/>const User = () =&gt; (<br/>  &lt;Switch&gt;<br/>    &lt;Route exact path="/" component={All} /&gt;<br/>    &lt;Route exact path="/users/add" component={AddUser} /&gt;<br/>    &lt;Route path="/users/:id/edit" component={EditUser} /&gt;<br/>  &lt;/Switch&gt;<br/>);<br/><br/>const withSaga = injectSaga({ key: 'user', saga });<br/>const withReducer = injectReducer({ key: 'user', reducer });<br/><br/>export default compose(<br/>  withSaga,<br/>  withReducer,<br/>)(User);<br/> </pre>
<ol start="4">
<li class="mce-root"><span>Connect the</span> <kbd>User</kbd> <span>container with Redux. The container file is updated to container code snippet, given as follows:</span></li>
</ol>
<pre style="color: black;padding-left: 60px">import React, { Component } from 'react';<br/>import { connect } from 'react-redux';<br/>import qs from 'query-string';<br/>import styled from 'styled-components';<br/>import { Pagination } from 'antd';<br/>import { createStructuredSelector } from 'reselect';<br/>import {<br/>  getUsers,<br/>  getTotalPage,<br/>  getTotalItem,<br/>  getCurrentPage,<br/>  getDeleteItem,<br/>} from './selectors';<br/>import Form from './Form';<br/>import List from './List';<br/>import { onSearchRequest, onRemoveRequest } from './actions';<br/><br/>const PaginationView = styled.div`<br/>  margin: 40px 0;<br/>`;<br/><br/>class User extends Component {<br/>  componentDidMount() {<br/>    this.props.onSubmit(qs.parse(this.props.location.search));<br/>  }<br/><br/>  componentWillReceiveProps(nextProps) {<br/>    const newProps = qs.parse(nextProps.location.search);<br/>    const oldProps = qs.parse(this.props.location.search);<br/><br/>    if (<br/>      oldProps.s !== newProps.s ||<br/>      oldProps.page !== newProps.page ||<br/>      nextProps.deleting !== this.props.deleting<br/>    ) {<br/>      this.props.onSubmit(newProps);<br/>    }<br/>  }<br/><br/>  onSubmit = e =&gt; {<br/>    this.props.history.push({<br/>      search: qs.stringify({<br/>        ...qs.parse(this.props.location.search),<br/>        ...e.toJS(),<br/>        page: 1,<br/>      }),<br/>      pathname: this.props.history.location.pathname,<br/>    });<br/>  };<br/><br/>  onChange = page =&gt; {<br/>    this.props.history.push({<br/>      search: qs.stringify({<br/>        ...qs.parse(this.props.location.search),<br/>        page,<br/>      }),<br/>      pathname: this.props.history.location.pathname,<br/>    });<br/>  };<br/><br/>  render() {<br/>    const { results, totalPage, totalItem, currentPage, location } = this.props;<br/>    const newProps = qs.parse(location.search);<br/><br/>    return (<br/>      &lt;div className="all-user-containers"&gt;<br/>        &lt;Form onSubmit={this.onSubmit} initialValues={newProps} /&gt;<br/>        &lt;List<br/>          dataSource={results}<br/>          keyword={newProps.s}<br/>          onRemove={this.props.onRemove}<br/>          onReload={() =&gt; this.props.onSubmit(newProps)}<br/>        /&gt;<br/>        &lt;PaginationView&gt;<br/>          {totalPage &gt; 0 &amp;&amp; (<br/>            &lt;Pagination<br/>              style={{ marginTop: 10 }}<br/>              current={currentPage + 1}<br/>              total={totalItem}<br/>              pageSize={10}<br/>              onChange={this.onChange}<br/>            /&gt;<br/>          )}<br/>        &lt;/PaginationView&gt;<br/>      &lt;/div&gt;<br/>    );<br/>  }<br/>}<br/><br/>export const mapStateToProps = createStructuredSelector({<br/>  results: getUsers(),<br/>  totalPage: getTotalPage(),<br/>  totalItem: getTotalItem(),<br/>  deleting: getDeleteItem(),<br/>  currentPage: getCurrentPage(),<br/>});<br/><br/>export const mapDispatchToProps = dispatch =&gt; ({<br/>  onSubmit: s =&gt; dispatch(onSearchRequest(s)),<br/>  onRemove: s =&gt; dispatch(onRemoveRequest(s)),<br/>});<br/><br/>export default connect(<br/>  mapStateToProps,<br/>  mapDispatchToProps,<br/>)(User);</pre>
<ol start="5">
<li class="mce-root"><span>Connect the </span><kbd>AddUser</kbd> <span>component to Redux:</span></li>
</ol>
<pre style="color: black;padding-left: 60px">import React, { Component } from 'react';<br/>import PropTypes from 'prop-types';<br/>import { connect } from 'react-redux';<br/>import { withRouter } from 'react-router-dom';<br/>import Form from './UserForm';<br/>import { onCreateRequest } from './actions';<br/><br/>class AddUser extends Component {<br/>  onSubmit = e =&gt; {<br/>    this.props.onCreate(e.toJS(), () =&gt; this.props.history.push('/'));<br/>  };<br/><br/>  render() {<br/>    return (<br/>      &lt;div className="add-user-containers"&gt;<br/>        &lt;Form<br/>          isNew<br/>          onSubmit={this.onSubmit}<br/>          initialValues={{ role: 'user', gender: 'male' }}<br/>          caption="Add New User"<br/>        /&gt;<br/>      &lt;/div&gt;<br/>    );<br/>  }<br/>}<br/><br/>AddUser.propTypes = {<br/>  onCreate: PropTypes.func.isRequired,<br/>};<br/><br/>export const mapDispatchToProps = dispatch =&gt; ({<br/>  onCreate: (item, cb) =&gt; dispatch(onCreateRequest(item, cb)),<br/>});<br/><br/>export default withRouter(<br/>  connect(<br/>    null,<br/>    mapDispatchToProps,<br/>  )(AddUser),<br/>);</pre>
<ol start="6">
<li>Connect the Edit User page to Redux:</li>
</ol>
<pre style="color: black;padding-left: 60px">import React, { Component } from 'react';<br/>import PropTypes from 'prop-types';<br/>import { connect } from 'react-redux';<br/>import { withRouter } from 'react-router-dom';<br/>import { createStructuredSelector } from 'reselect';<br/>import Form from './UserForm';<br/><br/>import { onUpdateRequest, onDetailRequest } from './actions';<br/>import { getUser } from './selectors';<br/><br/>class EditUser extends Component {<br/>  componentDidMount() {<br/>    this.props.onFetch(this.props.match.params.id);<br/>  }<br/><br/>  componentWillReceiveProps(nextProps) {<br/>    if (this.props.match.params.id !== nextProps.match.params.id) {<br/>      this.props.onFetch(nextProps.match.params.id);<br/>    }<br/>  }<br/><br/>  onSubmit = e =&gt; {<br/>    this.props.onUpdate(this.props.match.params.id, e.toJS(), () =&gt;<br/>      this.props.history.push('/'),<br/>    );<br/>  };<br/><br/>  render() {<br/>    const { user } = this.props;<br/><br/>    return (<br/>      &lt;div className="add-user-containers"&gt;<br/>        &lt;Form<br/>          initialValues={user}<br/>          onSubmit={this.onSubmit}<br/>          caption="Edit User"<br/>        /&gt;<br/>      &lt;/div&gt;<br/>    );<br/>  }<br/>}<br/><br/>EditUser.propTypes = {<br/>  user: PropTypes.object,<br/>  onFetch: PropTypes.func.isRequired,<br/>  onUpdate: PropTypes.func.isRequired,<br/>};<br/><br/>export const mapStateToProps = createStructuredSelector({<br/>  user: getUser(),<br/>});<br/><br/>export const mapDispatchToProps = dispatch =&gt; ({<br/>  onFetch: id =&gt; dispatch(onDetailRequest(id)),<br/>  onUpdate: (id, item, cb) =&gt; dispatch(onUpdateRequest(id, item, cb)),<br/>});<br/><br/>export default withRouter(<br/>  connect(<br/>    mapStateToProps,<br/>    mapDispatchToProps,<br/>  )(EditUser),<br/>);</pre>
<p>This is should give us a working application in which we can add a new user, delete a user, edit a user, and view the details of a user. </p>


            </article>

            
        </section>
    </div>



  </body>
</html>