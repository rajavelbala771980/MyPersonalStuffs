<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .chapter-number{font-weight:bold;font-size:8.3em;text-align:right;font-family:symbol}#sbo-rt-content .chapter-title{font-size:30pt;text-align:right}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:16pt;font-weight:bold}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:14pt;font-weight:bold}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:13pt;font-weight:bold}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:11pt;font-weight:normal;font-style:italic}#sbo-rt-content ul,#sbo-rt-content .packt_bullet{font-weight:normal;list-style-type:disc}#sbo-rt-content ol,#sbo-rt-content .packt_numbered{font-weight:normal}#sbo-rt-content .packt_normal{font-weight:normal}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-family:monospace;font-size:9pt;font-weight:normal;border-left:1px solid black;margin-left:20px;padding-left:5px;display:block;margin-bottom:.12in}#sbo-rt-content .packt_figref{font-size:10pt;font-weight:normal}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content .packt_tip{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/cfea789e-9199-4571-ab96-30413ef8104e.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content .packt_infobox{font-size:11pt;font-weight:normal;color:black;font-style:italic;background-image:url(../assets/5a771380-02eb-4759-8e38-030f17f643b4.png);background-position:left center;background-repeat:no-repeat;background-size:.6in;margin-left:20px;margin-right:20px;padding-left:.7in;min-height:.75in;}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-family:monospace;font-size:9pt;font-weight:normal}#sbo-rt-content .packt_italics{font-size:11pt;font-weight:normal;color:black;font-style:italic}#sbo-rt-content a,#sbo-rt-content .packt_url{font-family:monospace;font-size:9pt;font-weight:normal;text-decoration:none;word-break:break-all}#sbo-rt-content var,#sbo-rt-content .packt_inlinemsgid{display:none}#sbo-rt-content p,#sbo-rt-content .packt_para{text-align:left;font-size:11pt;line-height:17px}#sbo-rt-content .underline{text-decoration:underline}#sbo-rt-content .CDPImageAlign{width:100%;display:block}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{width:100%;display:block;margin-top:.18in;margin-bottom:.18in}#sbo-rt-content .CDPAlignCenter{text-align:center}#sbo-rt-content .CDPAlignLeft{text-align:left}#sbo-rt-content .CDPAlignRight{text-align:right}#sbo-rt-content .fm-editor-equation{border:none}#sbo-rt-content nav a.section{border-bottom:1px solid black;width:100%;display:block}#sbo-rt-content body table{border-collapse:collapse}#sbo-rt-content body table td{border:1px solid black;padding:.31em .62em}#sbo-rt-content .header-title{font-size:2.5em}#sbo-rt-content img.inline-image{height:1em}#sbo-rt-content .chapter-title{font-size:2.5em}#sbo-rt-content h1,#sbo-rt-content .packt_head1{font-size:2em}#sbo-rt-content h2,#sbo-rt-content .packt_head2{font-size:1.5em}#sbo-rt-content h3,#sbo-rt-content .packt_head3{font-size:1.17em}#sbo-rt-content h4,#sbo-rt-content .packt_head4{font-size:1em}#sbo-rt-content code,#sbo-rt-content .packt_code,#sbo-rt-content .packt_codeblock,#sbo-rt-content pre{font-size:.8em;margin-left:1.25em;padding-left:.3em;margin-bottom:.01em}#sbo-rt-content .packt_figref{font-size:.62em}#sbo-rt-content q,#sbo-rt-content .packt_quote{font-size:.68em}#sbo-rt-content .packt_tip{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content .packt_infobox{font-size:.68em;background-size:2.5em;margin-left:1.25em;margin-right:1.25em;padding-left:3em;min-height:2.5em}#sbo-rt-content kbd,#sbo-rt-content .packt_action{font-size:.75em}#sbo-rt-content .packt_italics{font-size:.9em}#sbo-rt-content a,#sbo-rt-content .packt_url{font-size:.7em}#sbo-rt-content p,#sbo-rt-content .packt_para{font-size:1em;line-height:1.06em}#sbo-rt-content .CDPImageAlign{max-width:100%;max-height:100%}#sbo-rt-content div.CDPAlign,#sbo-rt-content p.CDPAlign{margin-top:.01em;margin-bottom:.01em}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><section>

                            <header>
                    <h1 class="header-title">Getting started</h1>
                </header>
            
            <article>
                
<p>Let's get started with using Redux. We will start with basic configurations, and we can take the configurations further in each chapter:</p>
<ol>
<li class="mce-root"> Installing <kbd>node</kbd> and <kbd>npm</kbd>/<kbd>yarn</kbd> is done as follows:</li>
</ol>
<p style="padding-left: 60px">Install the latest version of a <kbd>node</kbd> from <a href="https://nodejs.org/">https://nodejs.org/</a>. To verify the correct installation, run the following command:</p>
<pre style="padding-left: 60px"><strong><span>node --version</span></strong></pre>
<p style="padding-left: 60px">You can get the latest version of <kbd>yarn</kbd> from <a href="https://yarnpkg.com/en/">https://yarnpkg.com/en/</a>, and <kbd>npm</kbd> from <a href="https://www.npmjs.com/get-npm">https://www.npmjs.com/get-npm</a>.</p>
<ol start="2">
<li class="mce-root">Initialize the project as follows:</li>
</ol>
<p style="padding-left: 60px">The first thing is to initialize the project. In this project, we are going to use <kbd>yarn</kbd>. The easiest way to initialize the project with <kbd>package.json</kbd> is to run the <kbd>init</kbd> command:</p>
<pre style="padding-left: 60px"><strong>yarn init</strong><br/>OR<br/><strong>npm init</strong></pre>
<p style="padding-left: 60px">Follow the onscreen instructions and provide the details. It will ask about the name of the project, the description, the author name, the version, the license, and the entry point. Most of the information can be customized according to your requirements.</p>
<p style="padding-left: 60px">Now, create a source folder, <kbd>src</kbd>, to include all of our code. The next step is to set up <kbd>webpack</kbd>. The minimal <kbd>package.json</kbd> file looks like the following:</p>
<pre style="padding-left: 60px">{<br/> "name": "gettting-started-with-redux-ch01",<br/> "version": "1.0.0",<br/> "description": "Getting Started With Redux",<br/> "main": "src/app/app.js",<br/> "scripts": {<br/>   "start": "webpack-dev-server",<br/>   "build": "webpack"<br/> },<br/> "author": "Suresh KUMAR Mukhiya",<br/> "license": "MIT",<br/> "devDependencies": {<br/>   "@babel/core": "7.2.0",<br/>   "@babel/preset-env": "7.2.0",<br/>   "@babel/preset-react": "7.0.0",<br/>   "babel-core": "6.26.3",<br/>   "babel-loader": "8.0.4",<br/>   "babel-plugin-transform-object-rest-spread": "6.26.0",<br/>   "webpack": "4.27.1",<br/>   "webpack-cli": "3.1.2",<br/>   "webpack-dev-server": "3.1.10"<br/> },<br/> "dependencies": {<br/>   "redux": "4.0.1"<br/> }<br/>}</pre>
<ol start="3">
<li>Configuring <kbd>webpack</kbd> is done as follows:</li>
</ol>
<p style="padding-left: 60px">You can read more about <kbd>webpack</kbd> on their official documentation site (<a href="https://webpack.js.org/">https://webpack.js.org/</a>). The first thing is to install <kbd>webpack</kbd> and <kbd>webpack-dev-server</kbd>:</p>
<pre style="padding-left: 60px" class="mce-root"><strong><span>yarn add webpack webpack-dev-server --dev</span></strong></pre>
<p style="padding-left: 60px">Now, we need to configure the <kbd>webpack</kbd>. We can do that in different ways. A lot of information about <kbd>webpack</kbd> configuration can be found on the documentation site (<a href="https://webpack.js.org/configuration/">https://webpack.js.org/configuration/</a>). The minimum configuration that we need is as follows:</p>
<pre style="padding-left: 60px">const path =require('path')<br/>module.exports ={<br/> Mode: ‘development’,<br/> entry:'./app/app.js',<br/> output: {<br/>   path: path.resolve('dist'),<br/>   filename: 'main.js'<br/> },</pre>
<p style="padding-left: 60px">Let's place the <kbd>webpack</kbd> configuration files into the <kbd>webpack</kbd> folder and create a base configuration file, called <kbd>webpack.config.js</kbd>. The loaders in the <kbd>webpack</kbd> tell the <kbd>webpack</kbd> what to do with the entry file(s). We are going to use Babel to transpile our JavaScript files; so, let's define the <kbd>babel-loader</kbd> for <kbd>.js</kbd> files, as follows:</p>
<pre style="padding-left: 60px">const path = require("path");<br/>module.exports = {<br/> mode: "development",<br/> entry: "./src/app/app.js",<br/> output: {<br/>   path: path.resolve("dist"),<br/>   filename: "main.js"<br/> },<br/> module: {<br/>   rules: [<br/>     {<br/>       test: /\.jsx?$/,<br/>       use: {<br/>         loader: "babel-loader"<br/>       },<br/>       exclude: /node_modules/<br/>     }<br/>   ]<br/> }<br/>};</pre>
<p style="padding-left: 60px">Generally, what we have is the bare minimum code required for Webpack configuration. However, in a real application, we would like to compile more resources than just the JavaScript files, including JS files, CSS files, fonts, image files, and others. We can configure these with webpack.</p>
<p style="padding-left: 60px">The most standard practice is to split the configuration into two types: development configuration and production configuration. By now, you might have already realized the need for separate configurations. A detailed blog article about this need and its process can be found at <a href="https://www.hacksoft.io/blog/split-your-webpack-configuration-development-and-production/">https://www.hacksoft.io/blog/split-your-webpack-configuration-development-and-production/</a>. To keep the configuration simple and elegant, we have created three files for webpack; namely, <kbd>webpack.base.babel.js</kbd>, <kbd>webpack.dev.babel.js</kbd>, and <kbd>webpack.prod.babel.js</kbd>. You can find a similar configuration in the starter file in the GitHub repository.</p>
<ol start="4">
<li class="mce-root">Babel is configured as follows:</li>
</ol>
<p style="padding-left: 60px">We will use Babel to compile JavaScript files. Let's configure it by installing <kbd>babel</kbd> and its related libraries:</p>
<pre style="padding-left: 60px"><strong>yarn add @babel/core @babel/preset-env @babel/preset-react babel-core babel --dev --exact</strong><br/><strong>yarn add babel-loader babel-plugin-transform-object-rest-spread --dev --exact</strong></pre>
<p style="padding-left: 60px">More configuration related to Babel can be found at <a href="https://babeljs.io/docs/usage/api/#options">https://babeljs.io/docs/usage/api/#options</a>.</p>
<p style="padding-left: 60px">For the minimum configuration, we will go with creating a <kbd>babel.config.js</kbd> file and adding an entry, as follows:</p>
<pre style="padding-left: 60px">module.exports = {<br/> presets: [<br/>   [<br/>     "@babel/preset-env",<br/>     {<br/>       modules: false<br/>     }<br/>   ],<br/>   "@babel/preset-react"<br/> ],<br/> plugins: ["transform-object-rest-spread"]<br/>};</pre>
<p style="padding-left: 60px">This file just indicates which libraries we are using in order to compile our JavaScript files. For example, we are going to use a <kbd>transform-object-rest-spread</kbd> library to utilize the spread feature. Learn more about this library at <a href="https://babeljs.io/docs/en/babel-plugin-proposal-object-rest-spread">https://babeljs.io/docs/en/babel-plugin-proposal-object-rest-spread</a>. We can add other polyfill plugins that we plan to use throughout the project later on. Babel can be configured in multiple ways. We can also create a <kbd>.babelrc</kbd> file to configure it. You will find a working example in <a href="f0ae2d58-7671-4ee1-91ff-19b3f5218ac3.xhtml" target="_blank">Chapter 2</a>, <em>Testing</em>.</p>
<ol start="5">
<li class="mce-root"> Define the entry file:</li>
</ol>
<p style="padding-left: 60px">The entry file indicates the startup file. We will point our entry file to <kbd>app/app.js</kbd>. This file contains the main entry codes. This file will be transpiled into <kbd>main.js</kbd> by Babel. Secondly, we will create an <kbd>index.html</kbd> file, which acts as the entry file for our application:</p>
<pre style="padding-left: 60px">&lt;!doctype html&gt;<br/>&lt;html lang="en"&gt;<br/>&lt;head&gt;<br/> &lt;!-- The first thing in any HTML file should be the charset --&gt;<br/> &lt;meta charset="utf-8"&gt;<br/> &lt;!-- Make the page mobile compatible --&gt;<br/> &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;<br/> &lt;!-- Allow installing the app to the homescreen --&gt;<br/> &lt;meta name="mobile-web-app-capable" content="yes"&gt;<br/> &lt;link rel="icon" href="/favicon.ico" /&gt;<br/> &lt;title&gt;Redux-Book-starter&lt;/title&gt;<br/>&lt;/head&gt;<br/>&lt;body&gt;<br/> &lt;div id="root"&gt;&lt;/div&gt;<br/>&lt;/body&gt;<br/>&lt;script src="dist/main.js"&gt;&lt;/script&gt;<br/>&lt;/html&gt;</pre>
<p style="padding-left: 60px">Also, inside of the <kbd>app/app.js</kbd>, we can try to log some text to verify that the configuration is working fine:</p>
<pre style="padding-left: 60px" class="mce-root"><span>console.log("Welcome to Redux Programming");</span></pre>
<p style="padding-left: 60px">Now, the last step is to configure the <kbd>webpack</kbd> script to run the build. This can be done by placing scripts in the <kbd>package.json</kbd> file:</p>
<pre style="padding-left: 60px" class="mce-root"><span>"scripts": {</span><br/><span> "start": "webpack-dev-server",</span><br/><span> "build": "webpack"</span><br/><span>},</span></pre>
<p style="padding-left: 60px">The first step is to build the files. To do that, simply run <kbd>yarn build</kbd> from your command line. Now, we can run the <kbd>webpack</kbd> by using the <kbd>yarn start</kbd> command from the command line. Note that this is the minimum configuration required to get started with Redux. Our aim here is for you to learn Redux. So, we are going to use starter files for each of the projects, which can be found in the GitHub repository for this book. The starter files, if preconfigured with Babel, Webpack, and Eslint, are ready to be consumed for further development.</p>
<ol start="6">
<li class="mce-root">Installing Redux:</li>
</ol>
<p style="padding-left: 60px">To get started with Redux, we need to add Redux to our dependencies list, as follows:</p>
<pre style="padding-left: 60px"><strong><span>yarn add redux --exact</span></strong></pre>
<p style="padding-left: 60px">Now, from the project root folder, inside of your command line, run <kbd>yarn start</kbd> and open <kbd>http://localhost:8080</kbd> in your favorite browser, checking the console. You should see the log we have in your <kbd>app/app.js</kbd>.</p>


            </article>

            
        </section>
    </div>



  </body>
</html>